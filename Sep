const { Client, GatewayIntentBits, Partials, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, Events } = require('discord.js');
require('dotenv').config();

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent],
    partials: [Partials.Channel]
});

// Vari√°veis do usu√°rio (simulando DB simples em mem√≥ria)
const userVars = {};

function getUserVar(userId, varName) {
    if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
    return userVars[userId][varName] || 0;
}

function setUserVar(userId, varName, value) {
    if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
    userVars[userId][varName] = value;
}

// AFK Map
const afkUsers = new Map();

client.once('ready', () => {
    console.log(`Bot logado como ${client.user.tag}!`);
});
// -work
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-work')) {
        const money = getUserVar(message.author.id, 'Money');
        setUserVar(message.author.id, 'Money', money + 150);
        message.reply({ content: `Voc√™ ganhou R$150. Total: R$${money + 150}`, ephemeral: true });
    }
});

// -carteira
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-carteira')) {
        const money = getUserVar(message.author.id, 'Money');
        message.reply({ content: `Voc√™ tem: R$${money}`, ephemeral: true });
    }
});

// -bank
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-bank')) {
        const args = message.content.split(' ');
        const amount = parseInt(args[1]);
        if (!amount || amount < 1) return message.reply({ content: 'Coloque uma quantia v√°lida.', ephemeral: true });
        const money = getUserVar(message.author.id, 'Money');
        if (money < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente!', ephemeral: true });
        const bank = getUserVar(message.author.id, 'Bank');
        setUserVar(message.author.id, 'Money', money - amount);
        setUserVar(message.author.id, 'Bank', bank + amount);
        message.reply({ content: `Voc√™ colocou R$${amount} no banco.`, ephemeral: true });
    }
});

// -bpegar
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-bpegar')) {
        const args = message.content.split(' ');
        const amount = parseInt(args[1]);
        const bank = getUserVar(message.author.id, 'Bank');
        if (!amount || amount < 1 || bank < amount) return message.reply({ content: 'Quantidade inv√°lida ou insuficiente no banco.', ephemeral: true });
        const money = getUserVar(message.author.id, 'Money');
        setUserVar(message.author.id, 'Bank', bank - amount);
        setUserVar(message.author.id, 'Money', money + amount);
        message.reply({ content: `Voc√™ pegou R$${amount} do banco.`, ephemeral: true });
    }
});

// -give
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-give')) {
        const args = message.content.split(' ');
        const userMention = message.mentions.users.first();
        const amount = parseInt(args[2]);
        if (!userMention || !amount || amount < 1) return message.reply({ content: 'Uso correto: -give @user <quantia>', ephemeral: true });
        const moneySender = getUserVar(message.author.id, 'Money');
        if (moneySender < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente!', ephemeral: true });
        const moneyReceiver = getUserVar(userMention.id, 'Money');
        setUserVar(message.author.id, 'Money', moneySender - amount);
        setUserVar(userMention.id, 'Money', moneyReceiver + amount);
        message.reply({ content: `Voc√™ deu R$${amount} para ${userMention.username}.`, ephemeral: true });
    }
});

// -cassino
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-cassino')) {
        const premios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
        const ganho = premios[Math.floor(Math.random() * premios.length)];
        const money = getUserVar(message.author.id, 'Money');
        setUserVar(message.author.id, 'Money', money + ganho);
        message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
    }
});

// -topglobal
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-topglobal')) {
        const leaderboard = Object.entries(userVars)
            .sort((a, b) => (b[1].Money || 0) - (a[1].Money || 0))
            .slice(0, 10)
            .map(([id, vars], i) => `${i + 1}. <@${id}>: R$${vars.Money}`)
            .join('\n');
        message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true });
    }
});
// -clear
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-clear')) {
        if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
        const args = message.content.split(' ');
        const quantidade = parseInt(args[1]);
        if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });
        await message.channel.bulkDelete(quantidade, true);
        message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
    }
});

// -afk
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-afk')) {
        const reason = message.content.slice(4).trim() || 'AFK';
        afkUsers.set(message.author.id, reason);
        message.reply({ content: `Voc√™ est√° agora AFK: ${reason}`, ephemeral: true });
    } else if (afkUsers.has(message.author.id)) {
        afkUsers.delete(message.author.id);
        message.reply({ content: 'Bem-vindo de volta! Seu status AFK foi removido.', ephemeral: true });
    }

    // Notificar men√ß√µes de usu√°rios AFK
    message.mentions.users.forEach(user => {
        if (afkUsers.has(user.id)) {
            message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
        }
    });
});

// -rules
client.on('messageCreate', (message) => {
    if (message.content.startsWith('-rules')) {
        if (!message.member.permissions.has('ADMINISTRATOR')) return message.reply({ content: 'Apenas administradores podem usar este comando.', ephemeral: true });
        message.reply({
            content: `**Regras do servidor ü´°**\n1. Proibido üö´ 18+ (Banimento Permanente)\n2. Proibido üö´ Desrespeitar Staff e membros (Mute 30min)\n3. Proibido üö´ Palavras inapropriadas (Mute 30min)\n4. Proibido üö´ Marcar Staff/Dono desnecessariamente (Mute 30min)\n5. Proibido üö´ Marcar @everyone (Mute 40min)\n6. Proibido üö´ Abuso de admins (Banimento Permanente)\n7. Proibido üö´ Pedir cargos gr√°tis (Mute 30min)\n8. Proibido üö´ Dar poderes de admin indevidamente (Banimento Permanente)\nEspero que leiam. ü§ì`,
            ephemeral: true
        });
    }
});
// Link padr√£o da imagem para todos os comandos de jogo
const jogoImage = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821";

// Fun√ß√£o auxiliar para enviar resposta ephemeral com imagem
function replyGameEphemeral(interaction, content) {
    interaction.reply({ 
        content, 
        ephemeral: true, 
        embeds: [{ image: { url: jogoImage } }] 
    });
}

// ---------------------------
// Interactions de bot√µes - Jogos
// ---------------------------
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    switch(interaction.customId) {
        // P√°gina 1
        case 'sab2': replyGameEphemeral(interaction, "-sab"); break;
        case '99night3': replyGameEphemeral(interaction, "-99nights"); break;
        case 'gag3': replyGameEphemeral(interaction, "-gag"); break;
        case 'blox3': replyGameEphemeral(interaction, "-bloxfruits"); break;
        case 'pag2': 
            await interaction.update({ content: "Jogos p√°gina 2", ephemeral: true }); break;

        // P√°gina 2
        case 'fnf3': replyGameEphemeral(interaction, "-fnf"); break;
        case 'brook3': replyGameEphemeral(interaction, "-brook"); break;
        case 'ftf': replyGameEphemeral(interaction, "-ftf"); break;
        case 'mm2': replyGameEphemeral(interaction, "-mm2"); break;
        case 'pag3': 
            await interaction.update({ content: "Jogos p√°gina 3", ephemeral: true }); break;

        // P√°gina 3
        case 'mimic3': replyGameEphemeral(interaction, "-mimic"); break;
        case 'forsaken2': replyGameEphemeral(interaction, "-forsaken"); break;
        case 'bedwars2': replyGameEphemeral(interaction, "-bedwars"); break;
        case 'ink2': replyGameEphemeral(interaction, "-ink"); break;
        case 'pag4': 
            await interaction.update({ content: "Jogos p√°gina 4", ephemeral: true }); break;

        // P√°gina 4
        case 'bluelock': replyGameEphemeral(interaction, "-bluelock"); break;
        case 'piggy': replyGameEphemeral(interaction, "-piggy"); break;
        case 'fnaf': replyGameEphemeral(interaction, "-fnafdoom"); break;
        case 'bladeball': replyGameEphemeral(interaction, "-bladeball"); break;

        // Fish executors
        case 'native': replyGameEphemeral(interaction, "-fish native"); break;
        case 'alchemy': replyGameEphemeral(interaction, "-fish alchemy"); break;
        case 'banana': replyGameEphemeral(interaction, "-fish banana"); break;
        case 'ronix': replyGameEphemeral(interaction, "-fish ronix"); break;
        case 'eclipse': replyGameEphemeral(interaction, "-fish eclipse"); break;
        case 'black': replyGameEphemeral(interaction, "-fish black"); break;

        // Universal executors
        case 'jmod': replyGameEphemeral(interaction, "-universal jmod"); break;
        case 'infyield': replyGameEphemeral(interaction, "-universal infyield"); break;
        case 'nameless': replyGameEphemeral(interaction, "-universal nameless"); break;
    }
});client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    const replyEphemeral = (content) => {
        interaction.reply({ content, ephemeral: true, embeds: [{ image: { url: jogoImage } }] });
    };

    // ---------- Sab (Steal a brainrot) ----------
    if (interaction.customId === 'sab2') {
        replyEphemeral("```lua\nlocal src = \"\"\nlocal CoreGui = game:GetService(\"StarterGui\")\npcall(function() src = game:HttpGet(\"https://yarhm.mhi.im/scr\", false) end)\nif src == \"\" then CoreGui:SetCore(\"SendNotification\", {Title=\"YARHM Outage\", Text=\"YARHM Online is currently unavailable! Using offline.\", Duration=5})\nsrc = game:HttpGet(\"https://raw.githubusercontent.com/Joystickplays/psychic-octo-invention/main/source/yarhm/1.19/yarhm.lua\", false) end\nloadstring(src)()```");
    }

    // ---------- 99 Nights ----------
    if (interaction.customId === '99night3') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/H4xScripts/Loader/refs/heads/main/loader.lua\", true))()```");
    }
    if (interaction.customId === 'void') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/VapeVoidware/VWExtra/main/NightsInTheForest.lua\", true))()```");
    }
    if (interaction.customId === 'galatic') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/GalacticScripts/Galactic-Hub/refs/heads/main/Galactic%20Hub\"))()```");
    }

    // ---------- Grow a Garden ----------
    if (interaction.customId === 'gag3') {
        replyEphemeral("```lua\n_G.ThunderVersion = \"Mobile\"\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/ThunderZ-05/HUB/main/Script\"))()```");
    }

    // ---------- Blox Fruits ----------
    if (interaction.customId === 'blox3') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/Tsuo7/TsuoHub/main/Tsuoscripts\"))()```");
    }

    // ---------- Funky Friday ----------
    if (interaction.customId === 'fnf3') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt\"))()```");
    }

    // ---------- Brookhaven ----------
    if (interaction.customId === 'brook3') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621\"))()```");
    }

    // ---------- Flee the Facility ----------
    if (interaction.customId === 'ftf') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://pastefy.app/JJVhs3rK/raw\"))()```");
    }

    // ---------- Murder Mystery 2 ----------
    if (interaction.customId === 'mm2') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua\"))()```");
    }

    // ---------- Mimic ----------
    if (interaction.customId === 'mimic3') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/SomeMimicHub/Mimic/main/AllChapters.lua\"))()```");
    }

    // ---------- Forsaken ----------
    if (interaction.customId === 'forsaken2') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/SomeForsakenHub/Forsaken.lua\"))()```");
    }

    // ---------- Bedwars ----------
    if (interaction.customId === 'bedwars2') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/SomeBedwarsHub/Bedwars.lua\"))()```");
    }

    // ---------- Ink Game ----------
    if (interaction.customId === 'ink2') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt\"))()```");
    }

    // ---------- Blue Lock ----------
    if (interaction.customId === 'bluelock') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua\"))()```");
    }

    // ---------- Piggy ----------
    if (interaction.customId === 'piggy') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy\"))()```");
    }

    // ---------- FNaF Doom ----------
    if (interaction.customId === 'fnaf') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua\"))()```");
    }

    // ---------- Blade Ball ----------
    if (interaction.customId === 'bladeball') {
        replyEphemeral("```lua\nloadstring(game:HttpGet(\"https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script\"))()```");
    }

    // ---------- Fish Hubs ----------
    const fishMap = {
        native: "https://raw.githubusercontent.com/Superman245/sc2/refs/heads/main/s6",
        alchemy: "https://scripts.alchemyhub.xyz",
        banana: "https://raw.githubusercontent.com/Catto-YFCN/Lunor_Dependencies/refs/heads/main/Loader",
        ronix: "https://raw.githubusercontent.com/RadeonScripts/RadeonHubMain/main/MainRobloxExploit",
        eclipse: "https://raw.githubusercontent.com/yolobradda/eclipsefisch/refs/heads/main/eclipsefisch",
        black: "https://rawscripts.net/raw/Fisch-Blackhub-Updated-zones-and-events-52148"
    };
    if (fishMap[interaction.customId]) {
        replyEphemeral(`\`\`\`lua\nloadstring(game:HttpGet("${fishMap[interaction.customId]}"))()\`\`\``);
    }

    // ---------- Universal Hubs ----------
    const universalMap = {
        jmod: "https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764",
        infyield: "https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source",
        nameless: "https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"
    };
    if (universalMap[interaction.customId]) {
        replyEphemeral(`\`\`\`lua\nloadstring(game:HttpGet("${universalMap[interaction.customId]}"))()\`\`\``);
    }
});
// Simula√ß√£o de armazenamento de vari√°veis de usu√°rios
const userVars = {};

// Fun√ß√µes auxiliares para pegar e setar vari√°veis
function getUserVar(userId, varName) {
    if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
    return userVars[userId][varName] || 0;
}

function setUserVar(userId, varName, value) {
    if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
    userVars[userId][varName] = value;
}

// ---------- -work (recompensa di√°ria) ----------
const workCooldowns = {};
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-work')) return;
    const userId = message.author.id;
    const now = Date.now();
    const cooldown = 3 * 60 * 60 * 1000;

    if (workCooldowns[userId] && now - workCooldowns[userId] < cooldown) {
        const remaining = Math.ceil((cooldown - (now - workCooldowns[userId])) / 1000 / 60);
        return message.reply({ content: `‚è≥ Espere ${remaining} minutos para usar -work novamente.`, ephemeral: true });
    }

    const money = getUserVar(userId, 'Money') + 150;
    setUserVar(userId, 'Money', money);
    workCooldowns[userId] = now;

    message.reply({ content: `üíµ Voc√™ recebeu R$150! Total: R$${money}`, ephemeral: true });
});

// ---------- -carteira ----------
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-carteira')) return;
    const money = getUserVar(message.author.id, 'Money');
    message.reply({ content: `üí∞ Voc√™ tem: R$${money}`, ephemeral: true });
});

// ---------- -bank (depositar dinheiro) ----------
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-bank')) return;
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    const money = getUserVar(message.author.id, 'Money');

    if (isNaN(amount) || amount < 1) return message.reply({ content: 'Digite um valor v√°lido.', ephemeral: true });
    if (money < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });

    setUserVar(message.author.id, 'Money', money - amount);
    setUserVar(message.author.id, 'Bank', getUserVar(message.author.id, 'Bank') + amount);
    message.reply({ content: `üè¶ Voc√™ depositou R$${amount} no banco. Total banco: R$${getUserVar(message.author.id, 'Bank')}`, ephemeral: true });
});

// ---------- -bpegar (retirar do banco) ----------
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-bpegar')) return;
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    const bank = getUserVar(message.author.id, 'Bank');

    if (isNaN(amount) || amount < 1) return message.reply({ content: 'Digite um valor v√°lido.', ephemeral: true });
    if (bank < amount) return message.reply({ content: 'Voc√™ n√£o tem tudo isso no banco.', ephemeral: true });

    setUserVar(message.author.id, 'Bank', bank - amount);
    setUserVar(message.author.id, 'Money', getUserVar(message.author.id, 'Money') + amount);
    message.reply({ content: `üè¶ Voc√™ retirou R$${amount} do banco. Total banco: R$${getUserVar(message.author.id, 'Bank')}`, ephemeral: true });
});

// ---------- -give ----------
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-give')) return;
    const mention = message.mentions.users.first();
    const args = message.content.split(' ');
    const amount = parseInt(args[2]);
    if (!mention) return message.reply({ content: 'Mencione um usu√°rio.', ephemeral: true });
    if (isNaN(amount) || amount < 1) return message.reply({ content: 'Digite um valor v√°lido.', ephemeral: true });

    const money = getUserVar(message.author.id, 'Money');
    if (money < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });

    setUserVar(message.author.id, 'Money', money - amount);
    setUserVar(mention.id, 'Money', getUserVar(mention.id, 'Money') + amount);

    message.reply({ content: `üéÅ Voc√™ enviou R$${amount} para ${mention.username}.`, ephemeral: true });
});

// ---------- -clear (admin) ----------
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-clear')) return;
    if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });

    const args = message.content.split(' ');
    const quantidade = parseInt(args[1]);
    if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });

    await message.channel.bulkDelete(quantidade, true);
    message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
});

// ---------- -afk ----------
const afkUsers = new Map();
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-afk')) {
        const reason = message.content.slice(4) || 'AFK';
        afkUsers.set(message.author.id, reason);
        return message.reply({ content: `Voc√™ est√° AFK: ${reason}`, ephemeral: true });
    }

    if (afkUsers.has(message.author.id)) {
        afkUsers.delete(message.author.id);
        message.reply({ content: `Bem-vindo de volta! Seu status AFK foi removido.`, ephemeral: true });
    }

    message.mentions.users.forEach(user => {
        if (afkUsers.has(user.id)) {
            message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
        }
    });
});
// Menu -script com bot√µes
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-script')) return;

    const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

    const embed = new MessageEmbed()
        .setTitle('Scripts de Steal a Brainrot')
        .setDescription('Acesse o servidor oficial!\nhttps://discord.gg/6t5ga4NT')
        .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821')
        .setFooter('https://discord.gg/6t5ga4NT');

    const row = new MessageActionRow()
        .addComponents(
            new MessageButton().setCustomId('sab2').setLabel('Steal a brainrot').setStyle('DANGER').setEmoji('üåü'),
            new MessageButton().setCustomId('99night3').setLabel('99nights').setStyle('PRIMARY').setEmoji('‚≠ê'),
            new MessageButton().setCustomId('gag3').setLabel('Grow A Garden').setStyle('PRIMARY').setEmoji('üáßüá∑'),
            new MessageButton().setCustomId('blox3').setLabel('Blox Fruits').setStyle('PRIMARY').setEmoji('üéà'),
            new MessageButton().setCustomId('pag2').setLabel('P√°gina 2').setStyle('PRIMARY').setEmoji('üìö')
        );

    message.reply({ embeds: [embed], components: [row], ephemeral: true });
});
// Intera√ß√£o - pag2
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;
    if (interaction.customId !== 'pag2') return;

    const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

    const embed = new MessageEmbed()
        .setTitle('Scripts - P√°gina 2')
        .setDescription('Escolha um jogo')
        .setColor('#FF0000')
        .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

    const row = new MessageActionRow()
        .addComponents(
            new MessageButton().setCustomId('fnf3').setLabel('Funky Friday').setStyle('PRIMARY').setEmoji('üë®‚Äçüé§'),
            new MessageButton().setCustomId('brook3').setLabel('Brookhaven').setStyle('PRIMARY').setEmoji('üá∫üá∏'),
            new MessageButton().setCustomId('ftf').setLabel('Flee The Facility').setStyle('PRIMARY').setEmoji('üî•'),
            new MessageButton().setCustomId('mm2').setLabel('Murder Mystery 2').setStyle('PRIMARY').setEmoji('üó°Ô∏è'),
            new MessageButton().setCustomId('pag3').setLabel('Pr√≥xima P√°gina').setStyle('PRIMARY').setEmoji('üìñ')
        );

    await interaction.update({ embeds: [embed], components: [row], ephemeral: true });
});
// Intera√ß√£o - pag3
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;
    if (interaction.customId !== 'pag3') return;

    const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

    const embed = new MessageEmbed()
        .setTitle('Scripts - P√°gina 3')
        .setDescription('Escolha um jogo')
        .setColor('#FF0000')
        .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

    const row = new MessageActionRow()
        .addComponents(
            new MessageButton().setCustomId('mimic3').setLabel('Mimic (All Chapters)').setStyle('PRIMARY').setEmoji('üî•'),
            new MessageButton().setCustomId('forsaken2').setLabel('Forsaken').setStyle('PRIMARY').setEmoji('üî•'),
            new MessageButton().setCustomId('bedwars2').setLabel('Bedwars').setStyle('PRIMARY').setEmoji('üî•'),
            new MessageButton().setCustomId('ink2').setLabel('Ink Game').setStyle('PRIMARY').setEmoji('üî•'),
            new MessageButton().setCustomId('pag4').setLabel('P√°gina 4').setStyle('PRIMARY').setEmoji('üìö')
        );

    await interaction.update({ embeds: [embed], components: [row], ephemeral: true });
});
// Intera√ß√£o - pag4 (√∫ltima p√°gina)
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;
    if (interaction.customId !== 'pag4') return;

    const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

    const embed = new MessageEmbed()
        .setTitle('Scripts - P√°gina 4')
        .setDescription('Escolha um jogo antes de pegar o script')
        .setColor('#FF0000')
        .setFooter('√öltima P√°gina')
        .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

    const row = new MessageActionRow()
        .addComponents(
            new MessageButton().setCustomId('bluelock').setLabel('Blue Lock').setStyle('PRIMARY').setEmoji('‚öΩ'),
            new MessageButton().setCustomId('piggy').setLabel('Piggy').setStyle('PRIMARY').setEmoji('üê∑'),
            new MessageButton().setCustomId('fnafdoom').setLabel('Fnaf Doom').setStyle('PRIMARY').setEmoji('üêÇ'),
            new MessageButton().setCustomId('bladeball').setLabel('Blade Ball').setStyle('PRIMARY').setEmoji('üó°Ô∏è')
        );

    await interaction.update({ embeds: [embed], components: [row], ephemeral: true });
});

// Resposta ephemeral ao clicar em cada script
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    const scripts = {
        bluelock: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua'))()``",
        piggy: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy'))()``",
        fnafdoom: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua'))()``",
        bladeball: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script'))()``"
    };

    if (scripts[interaction.customId]) {
        await interaction.reply({ content: `Aqui est√° o script para **${interaction.customId}**:\n${scripts[interaction.customId]}`, ephemeral: true });
    }
});
// -script menu principal
client.on('messageCreate', async (message) => {
    if (!message.content.startsWith('-script')) return;

    const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

    const embed = new MessageEmbed()
        .setTitle('Scripts de Steal a Brainrot')
        .setDescription('Acesse o servidor oficial!\nhttps://discord.gg/6t5ga4NT')
        .setColor('#FF0000')
        .setFooter('https://discord.gg/6t5ga4NT')
        .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

    const row = new MessageActionRow()
        .addComponents(
            new MessageButton().setCustomId('sab2').setLabel('Steal a brainrot').setStyle('DANGER').setEmoji('üåü'),
            new MessageButton().setCustomId('99night3').setLabel('99 Nights').setStyle('PRIMARY').setEmoji('‚≠ê'),
            new MessageButton().setCustomId('gag3').setLabel('Grow A Garden').setStyle('PRIMARY').setEmoji('üáßüá∑'),
            new MessageButton().setCustomId('blox3').setLabel('Blox Fruits').setStyle('PRIMARY').setEmoji('üéà'),
            new MessageButton().setCustomId('pag2').setLabel('P√°gina 2').setStyle('PRIMARY').setEmoji('üìö')
        );

    await message.reply({ embeds: [embed], components: [row], ephemeral: true });
});

// Respostas ephemeral ao clicar nos bot√µes da p√°gina 1
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    const scripts = {
        sab2: "``local src = ''\nlocal CoreGui = game:GetService('StarterGui')\npcall(function() src = game:HttpGet('https://yarhm.mhi.im/scr', false) end)\nif src == '' then CoreGui:SetCore('SendNotification',{Title='YARHM Outage',Text='YARHM Online is currently unavailable! Sorry for the inconvenience. Using YARHM Offline.',Duration=5}) src = game:HttpGet('https://raw.githubusercontent.com/Joystickplays/psychic-octo-invention/main/source/yarhm/1.19/yarhm.lua', false) end\nloadstring(src)()``",
        '99night3': "``loadstring(game:HttpGet('https://raw.githubusercontent.com/H4xScripts/Loader/refs/heads/main/loader.lua', true))()``",
        gag3: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/ThunderZ-05/HUB/main/Script'))()``",
        blox3: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Tsuo7/TsuoHub/main/Tsuoscripts'))()``"
    };

    if (scripts[interaction.customId]) {
        await interaction.reply({ content: `Script para **${interaction.customId}**:\n${scripts[interaction.customId]}`, ephemeral: true });
    }
});
// -script p√°gina 2
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'pag2') {
        const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

        const embed = new MessageEmbed()
            .setTitle('P√°gina 2 - Scripts de Jogos')
            .setDescription('Escolha um jogo abaixo:')
            .setColor('#FF0000')
            .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

        const row = new MessageActionRow()
            .addComponents(
                new MessageButton().setCustomId('fnf3').setLabel('Funky Friday').setStyle('PRIMARY').setEmoji('üë®‚Äçüé§'),
                new MessageButton().setCustomId('brook3').setLabel('Brookhaven').setStyle('PRIMARY').setEmoji('üá∫üá∏'),
                new MessageButton().setCustomId('ftf').setLabel('Flee the Facility').setStyle('PRIMARY').setEmoji('üî•'),
                new MessageButton().setCustomId('mm2').setLabel('Murder Mystery 2').setStyle('PRIMARY').setEmoji('üó°Ô∏è'),
                new MessageButton().setCustomId('pag3').setLabel('P√°gina 3').setStyle('PRIMARY').setEmoji('üìñ')
            );

        await interaction.update({ embeds: [embed], components: [row] });
    }
});

// -script p√°gina 3
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'pag3') {
        const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

        const embed = new MessageEmbed()
            .setTitle('P√°gina 3 - Scripts de Jogos')
            .setDescription('Escolha um jogo abaixo:')
            .setColor('#FF0000')
            .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

        const row = new MessageActionRow()
            .addComponents(
                new MessageButton().setCustomId('mimic3').setLabel('Mimic (All Chapters)').setStyle('PRIMARY').setEmoji('üî•'),
                new MessageButton().setCustomId('forsaken2').setLabel('Forsaken').setStyle('PRIMARY').setEmoji('üî•'),
                new MessageButton().setCustomId('bedwars2').setLabel('Bedwars').setStyle('PRIMARY').setEmoji('üî•'),
                new MessageButton().setCustomId('ink2').setLabel('Ink Game').setStyle('PRIMARY').setEmoji('üî•'),
                new MessageButton().setCustomId('pag4').setLabel('P√°gina 4').setStyle('PRIMARY').setEmoji('üìö')
            );

        await interaction.update({ embeds: [embed], components: [row] });
    }
});

// Scripts de jogos - respostas ephemeral
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    const scripts = {
        fnf3: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt'))()``",
        brook3: "``loadstring(game:HttpGet('https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621'))()``",
        ftf: "``loadstring(game:HttpGet('https://pastefy.app/JJVhs3rK/raw'))()``",
        mm2: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/alan11ago/MM2Hub/main/MM2.lua'))()``",
        mimic3: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/YourMimicHubLink'))()``",
        forsaken2: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/alan11ago/ForsakenHub/main/Forsaken.lua'))()``",
        bedwars2: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/BedwarsHub/main/Bedwars.lua'))()``",
        ink2: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt'))()``"
    };

    if (scripts[interaction.customId]) {
        await interaction.reply({ content: `Script para **${interaction.customId}**:\n${scripts[interaction.customId]}`, ephemeral: true });
    }
});
// -script p√°gina 4
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'pag4') {
        const { MessageActionRow, MessageButton, MessageEmbed } = require('discord.js');

        const embed = new MessageEmbed()
            .setTitle('P√°gina 4 - Scripts de Jogos')
            .setDescription('Escolha um jogo abaixo:')
            .setColor('#FF0000')
            .setImage('https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821');

        const row = new MessageActionRow()
            .addComponents(
                new MessageButton().setCustomId('bluelock').setLabel('Blue Lock').setStyle('PRIMARY').setEmoji('‚öΩ'),
                new MessageButton().setCustomId('piggy').setLabel('Piggy').setStyle('PRIMARY').setEmoji('üê∑'),
                new MessageButton().setCustomId('fnaf').setLabel('FNAF Doom').setStyle('PRIMARY').setEmoji('üêÇ'),
                new MessageButton().setCustomId('bladeball').setLabel('Blade Ball').setStyle('PRIMARY').setEmoji('üó°Ô∏è')
            );

        await interaction.update({ embeds: [embed], components: [row] });
    }
});

// Scripts da p√°gina 4 e executores
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    const scripts = {
        bluelock: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua'))()``",
        piggy: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy'))()``",
        fnaf: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua'))()``",
        bladeball: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script'))()``",
        // executores universais
        jmod: "``loadstring(game:HttpGet('https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764'))()``",
        infyield: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()``",
        nameless: "``loadstring(game:HttpGet('https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source'))()``"
    };

    if (scripts[interaction.customId]) {
        await interaction.reply({ content: `Executor/Script para **${interaction.customId}**:\n${scripts[interaction.customId]}`, ephemeral: true });
    }
});
// Vari√°veis globais de usu√°rios
const userVars = {}; // Estrutura: { userId: { Money: number, Bank: number } }

// Fun√ß√£o auxiliar
function getUserVar(userId, key) {
    if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
    return userVars[userId][key] || 0;
}

function setUserVar(userId, key, value) {
    if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
    userVars[userId][key] = value;
}

// -work
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-work')) {
        const money = getUserVar(message.author.id, 'Money');
        setUserVar(message.author.id, 'Money', money + 150);
        message.reply({ content: `üí∞ Voc√™ ganhou $150. Total: $${money + 150}`, ephemeral: true });
    }
});

// -carteira
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-carteira')) {
        const money = getUserVar(message.author.id, 'Money');
        message.reply({ content: `üëú Voc√™ tem $${money}`, ephemeral: true });
    }
});

// -bank
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-bank')) {
        const args = message.content.split(' ');
        const amount = parseInt(args[1]);
        const money = getUserVar(message.author.id, 'Money');
        if (!amount || amount < 1 || money < amount) return message.reply({ content: 'Valor inv√°lido ou saldo insuficiente', ephemeral: true });
        setUserVar(message.author.id, 'Money', money - amount);
        const bank = getUserVar(message.author.id, 'Bank');
        setUserVar(message.author.id, 'Bank', bank + amount);
        message.reply({ content: `üè¶ Voc√™ depositou $${amount} no banco.`, ephemeral: true });
    }
});

// -bpegar
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-bpegar')) {
        const args = message.content.split(' ');
        const amount = parseInt(args[1]);
        const bank = getUserVar(message.author.id, 'Bank');
        if (!amount || amount < 1 || bank < amount) return message.reply({ content: 'Valor inv√°lido ou saldo insuficiente no banco', ephemeral: true });
        setUserVar(message.author.id, 'Bank', bank - amount);
        const money = getUserVar(message.author.id, 'Money');
        setUserVar(message.author.id, 'Money', money + amount);
        message.reply({ content: `üè¶ Voc√™ retirou $${amount} do banco.`, ephemeral: true });
    }
});

// -give
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-give')) {
        const args = message.content.split(' ');
        const user = message.mentions.users.first();
        const amount = parseInt(args[2]);
        if (!user || !amount || amount < 1) return message.reply({ content: 'Uso: -give @usu√°rio <valor>', ephemeral: true });
        const giverMoney = getUserVar(message.author.id, 'Money');
        if (giverMoney < amount) return message.reply({ content: 'Voc√™ n√£o tem esse valor', ephemeral: true });
        setUserVar(message.author.id, 'Money', giverMoney - amount);
        const receiverMoney = getUserVar(user.id, 'Money');
        setUserVar(user.id, 'Money', receiverMoney + amount);
        message.reply({ content: `üí∏ Voc√™ enviou $${amount} para ${user.username}`, ephemeral: true });
    }
});

// -cassino
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-cassino')) {
        const pr√™mios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
        const ganho = pr√™mios[Math.floor(Math.random() * pr√™mios.length)];
        const money = getUserVar(message.author.id, 'Money');
        setUserVar(message.author.id, 'Money', money + ganho);
        message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
    }
});

// -topglobal
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-topglobal')) {
        const leaderboard = Object.entries(userVars)
            .sort((a, b) => b[1].Money - a[1].Money)
            .slice(0, 10)
            .map(([id, vars], index) => `${index + 1}. <@${id}>: R$${vars.Money}`)
            .join('\n');
        message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true });
    }
});

// -clear
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-clear')) {
        if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
        const args = message.content.split(' ');
        const quantidade = parseInt(args[1]);
        if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });
        await message.channel.bulkDelete(quantidade, true);
        message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
    }
});

// -afk
const afkUsers = new Map();
client.on('messageCreate', async (message) => {
    if (message.content.startsWith('-afk')) {
        const reason = message.content.slice(4) || 'AFK';
        afkUsers.set(message.author.id, reason);
        message.reply({ content: `Voc√™ est√° agora AFK: ${reason}`, ephemeral: true });
    } else if (afkUsers.has(message.author.id)) {
        afkUsers.delete(message.author.id);
        message.reply({ content: `Bem-vindo de volta! Seu status AFK foi removido.`, ephemeral: true });
    }

    // Notificar se mencionar algu√©m AFK
    message.mentions.users.forEach(user => {
        if (afkUsers.has(user.id)) {
            message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
        }
    });
});
// -rules
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-rules')) {
    if (!message.member.permissions.has('ADMINISTRATOR')) return message.reply({ content: 'Apenas administradores podem usar este comando.', ephemeral: true });

    const rules = `
üìú **Regras do Servidor BR Comunidade** ü´°
1. Proibido üö´ 18+ (Banimentos Permanentes)
2. Proibido üö´ Desrespeitar Staffs ou membros (Mute 30 min)
3. Proibido üö´ Falar palavras inadequadas (Mute 30 min)
4. Proibido üö´ Marcar Staffs ou Dono sem motivo (Mute 30 min)
5. Proibido üö´ Marcar @everyone sem necessidade (Mute 40 min)
6. Proibido üö´ Abuso de poder por administradores (Ban Permanente)
7. Proibido üö´ Mendigar ou doar cargos gr√°tis sem autoriza√ß√£o (Mute 30 min)
8. Proibido üö´ Dar poder de administrador a quem n√£o tem permiss√£o (Ban Permanente)
üìå Leia e siga todas as regras!
`;

    message.reply({ content: rules, ephemeral: true });
  }
});const { Client, Intents, MessageActionRow, MessageButton, MessageSelectMenu } = require('discord.js');
const client = new Client({ intents: [Intents.FLAGS.GUILDS, Intents.FLAGS.GUILD_MESSAGES] });

const userVars = {}; // Estrutura: { userId: { Money: 0, Bank: 0 } }
const afkUsers = new Map();

// Fun√ß√µes auxiliares
function getUserVar(userId, varName) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][varName] || 0;
}

function setUserVar(userId, varName, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][varName] = value;
}

// Login do bot
client.once('ready', () => {
  console.log(`Logado como ${client.user.tag}!`);
});

// Substitua 'SEU_TOKEN_AQUI' pelo token do bot
client.login('');
// ---------- COMANDOS DE ECONOMIA ----------

// -work
client.on('messageCreate', message => {
  if (message.content.startsWith('-work')) {
    const ganho = 150;
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    message.reply({ content: `üíµ ${message.author.username}, voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});

// -cassino
client.on('messageCreate', message => {
  if (message.content.startsWith('-cassino')) {
    const premios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
    const ganho = premios[Math.floor(Math.random() * premios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});

// -bank
client.on('messageCreate', message => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const quant = parseInt(args[1]);
    const money = getUserVar(message.author.id, 'Money');
    if (!quant || quant < 1) return message.reply({ content: 'üí∞ Informe um valor v√°lido.', ephemeral: true });
    if (money < quant) return message.reply({ content: '‚ùå Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });
    setUserVar(message.author.id, 'Money', money - quant);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + quant);
    message.reply({ content: `üè¶ Voc√™ depositou R$${quant} no banco. Total banco: R$${bank + quant}`, ephemeral: true });
  }
});

// -bpegar
client.on('messageCreate', message => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const quant = parseInt(args[1]);
    const bank = getUserVar(message.author.id, 'Bank');
    if (!quant || quant < 1) return message.reply({ content: 'üí∞ Informe um valor v√°lido.', ephemeral: true });
    if (bank < quant) return message.reply({ content: '‚ùå Voc√™ n√£o tem tanto dinheiro no banco.', ephemeral: true });
    setUserVar(message.author.id, 'Bank', bank - quant);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + quant);
    message.reply({ content: `üè¶ Voc√™ retirou R$${quant} do banco. Total dinheiro: R$${money + quant}`, ephemeral: true });
  }
});

// -give
client.on('messageCreate', message => {
  if (message.content.startsWith('-give')) {
    const mentions = message.mentions.users.first();
    const args = message.content.split(' ');
    const quant = parseInt(args[2]);
    if (!mentions) return message.reply({ content: '‚ùå Mencione um usu√°rio.', ephemeral: true });
    if (!quant || quant < 1) return message.reply({ content: '‚ùå Informe um valor v√°lido.', ephemeral: true });
    const money = getUserVar(message.author.id, 'Money');
    if (money < quant) return message.reply({ content: '‚ùå Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });
    setUserVar(message.author.id, 'Money', money - quant);
    const targetMoney = getUserVar(mentions.id, 'Money');
    setUserVar(mentions.id, 'Money', targetMoney + quant);
    message.reply({ content: `üéÅ Voc√™ deu R$${quant} para ${mentions.username}.`, ephemeral: true });
  }
});

// -topglobal
client.on('messageCreate', message => {
  if (message.content.startsWith('-topglobal')) {
    const topUsers = Object.entries(userVars)
      .sort((a, b) => b[1].Money - a[1].Money)
      .slice(0, 10)
      .map(([id, vars], index) => `${index + 1}. <@${id}>: R$${vars.Money}`)
      .join('\n');
    message.reply({ content: `üèÜ Top 10 mais ricos do servidor:\n${topUsers}`, ephemeral: true });
  }
});

// -afk
client.on('messageCreate', message => {
  if (message.content.startsWith('-afk')) {
    const reason = message.content.slice(4).trim() || 'AFK';
    afkUsers.set(message.author.id, reason);
    message.reply({ content: `üü¢ ${message.author.username} est√° AFK: ${reason}`, ephemeral: true });
  } else if (afkUsers.has(message.author.id)) {
    afkUsers.delete(message.author.id);
    message.reply({ content: `üîµ ${message.author.username}, seu status AFK foi removido.`, ephemeral: true });
  }

  // Avisar se mencionar algu√©m AFK
  message.mentions.users.forEach(user => {
    if (afkUsers.has(user.id)) {
      message.reply({ content: `‚ö†Ô∏è ${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
    }
  });
});
// ---------- COMANDOS ADMIN ----------

// -clear
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-clear')) {
    if (!message.member.permissions.has('MANAGE_MESSAGES')) {
      return message.reply({ content: '‚ùå Apenas administradores podem executar este comando.', ephemeral: true });
    }
    const args = message.content.split(' ');
    const quantidade = parseInt(args[1]);
    if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: '‚ùå Informe um n√∫mero v√°lido.', ephemeral: true });
    await message.channel.bulkDelete(quantidade, true);
    message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
  }
});

// -rules
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-rules')) {
    if (!message.member.permissions.has('ADMINISTRATOR')) {
      return message.reply({ content: '‚ùå Apenas administradores podem usar este comando.', ephemeral: true });
    }
    message.reply({ 
      content: `
üìú **Regras do Servidor VexShadow**:

1. Proibido conte√∫do 18+ (Banimento Permanente)
2. Proibido desrespeitar staff ou membros (Mute 30 min)
3. Proibido palavras inadequadas (Mute 30 min)
4. Proibido marcar staff/dono sem necessidade (Mute 30 min)
5. Proibido usar @everyone sem permiss√£o (Mute 40 min)
6. Proibido abuso de poder por administradores (Banimento Permanente)
7. Proibido pedir ou doar cargos gratuitamente (Mute 30 min)
8. Proibido dar poderes de administrador sem permiss√£o (Banimento Permanente)
    `, 
      ephemeral: true 
    });
  }
});
// ---------- COMANDOS DE JOGOS E EXECUTORES ----------

const gameImage = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png";

// -script (p√°gina 1)
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-script')) {
    const row = new Discord.ActionRowBuilder()
      .addComponents(
        new Discord.ButtonBuilder().setCustomId('sab2').setLabel('Steal a brainrot').setStyle(Discord.ButtonStyle.Danger).setEmoji('üåü'),
        new Discord.ButtonBuilder().setCustomId('99night3').setLabel('99nights').setStyle(Discord.ButtonStyle.Primary).setEmoji('‚≠ê'),
        new Discord.ButtonBuilder().setCustomId('gag3').setLabel('Grow A Garden').setStyle(Discord.ButtonStyle.Primary).setEmoji('üáßüá∑'),
        new Discord.ButtonBuilder().setCustomId('blox3').setLabel('Blox fruits').setStyle(Discord.ButtonStyle.Primary).setEmoji('üéà'),
        new Discord.ButtonBuilder().setCustomId('pag2').setLabel('P√°gina 2').setStyle(Discord.ButtonStyle.Primary).setEmoji('üìö')
      );

    await message.reply({ 
      embeds: [new Discord.EmbedBuilder()
        .setTitle("**Scripts de steal a brainrot**")
        .setDescription("Acesse o servidor oficial!\nhttps://discord.gg/6t5ga4NT")
        .setImage(gameImage)
        .setColor(0xff0000)
        .setFooter({ text: 'https://discord.gg/6t5ga4NT' })
      ],
      components: [row],
      ephemeral: true
    });
  }
});

// OnInteraction das p√°ginas dos scripts (pag2, pag3, pag4)
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  const pages = {
    pag2: [
      {id: 'fnf3', label: 'Funky Friday', emoji: 'üë®‚Äçüé§'},
      {id: 'brook3', label: 'Brookhaven', emoji: 'üá∫üá∏'},
      {id: 'ftf', label: 'Flee the Facility', emoji: 'üî•'},
      {id: 'mm2', label: 'Murder Mystery 2', emoji: 'üó°Ô∏è'},
      {id: 'pag3', label: 'Pr√≥xima p√°gina', emoji: 'üìñ'}
    ],
    pag3: [
      {id: 'mimic3', label: 'Mimic (All chapters)', emoji: 'üî•'},
      {id: 'forsaken2', label: 'Forsaken', emoji: 'üî•'},
      {id: 'bedwars2', label: 'Bedwars', emoji: 'üî•'},
      {id: 'ink2', label: 'Ink Game', emoji: 'üî•'},
      {id: 'pag4', label: 'Pr√≥xima p√°gina', emoji: 'üìö'}
    ],
    pag4: [
      {id: 'bluelock', label: 'Blue Lock', emoji: '‚öΩ'},
      {id: 'piggy', label: 'Piggy', emoji: 'üê∑'},
      {id: 'fnaf', label: 'FNaF Doom', emoji: 'üêÇ'},
      {id: 'bladeball', label: 'Blade Ball', emoji: 'üó°Ô∏è'}
    ]
  };

  if (pages[interaction.customId]) {
    const buttons = pages[interaction.customId].map(b => 
      new Discord.ButtonBuilder()
        .setCustomId(b.id)
        .setLabel(b.label)
        .setStyle(Discord.ButtonStyle.Primary)
        .setEmoji(b.emoji)
    );
    const row = new Discord.ActionRowBuilder().addComponents(buttons);
    await interaction.update({ components: [row], embeds: [new Discord.EmbedBuilder()
      .setTitle("Scripts abaixo")
      .setDescription(`P√°gina: ${interaction.customId}`)
      .setImage(gameImage)
      .setColor(0xff0000)
    ]});
  }

  // Execu√ß√£o de scripts dos jogos
  const scripts = {
    fnf3: "https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt",
    brook3: "https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621",
    ftf: "https://pastefy.app/JJVhs3rK/raw",
    mm2: "https://raw.githubusercontent.com/ThunderZ-05/HUB/main/Script",
    // adicionar todos os outros links aqui seguindo o padr√£o
  };

  if (scripts[interaction.customId]) {
    await interaction.reply({ content: `Executando script...`, ephemeral: true });
    // Aqui voc√™ poderia mandar o comando interno ou apenas mostrar o link
    await interaction.followUp({ content: `\`\`\`lua\nloadstring(game:HttpGet("${scripts[interaction.customId]}"))()\`\`\``, ephemeral: true });
  }
});
// ---------- COMANDOS DE ECONOMIA ----------

// Vari√°veis iniciais para cada usu√°rio
const userVars = new Map(); // Estrutura: { userId: { Money: 0, Bank: 0 } }

function getUserVar(userId, varName) {
  if (!userVars.has(userId)) userVars.set(userId, { Money: 0, Bank: 0 });
  return userVars.get(userId)[varName] || 0;
}

function setUserVar(userId, varName, value) {
  if (!userVars.has(userId)) userVars.set(userId, { Money: 0, Bank: 0 });
  const vars = userVars.get(userId);
  vars[varName] = value;
  userVars.set(userId, vars);
}

// -work
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-work')) {
    const money = getUserVar(message.author.id, 'Money');
    const ganho = 150;
    setUserVar(message.author.id, 'Money', money + ganho);
    message.reply({ content: `Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});

// -carteira
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-carteira')) {
    const money = getUserVar(message.author.id, 'Money');
    message.reply({ content: `Voc√™ tem R$${money} na carteira.`, ephemeral: true });
  }
});

// -give
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-enviar')) {
    const args = message.content.split(' ');
    const user = message.mentions.users.first();
    const amount = parseInt(args[2]);
    if (!user || isNaN(amount)) return message.reply({ content: 'Use: -enviar @user <quantia>', ephemeral: true });
    const senderMoney = getUserVar(message.author.id, 'Money');
    if (senderMoney < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });
    setUserVar(message.author.id, 'Money', senderMoney - amount);
    const receiverMoney = getUserVar(user.id, 'Money');
    setUserVar(user.id, 'Money', receiverMoney + amount);
    message.reply({ content: `<@${user.id}> recebeu R$${amount} de voc√™!`, ephemeral: true });
  }
});

// -bank
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const deposit = parseInt(args[1]);
    if (isNaN(deposit) || deposit < 1) return message.reply({ content: 'Digite um valor v√°lido para depositar.', ephemeral: true });
    const money = getUserVar(message.author.id, 'Money');
    if (money < deposit) return message.reply({ content: 'Voc√™ n√£o tem esse dinheiro.', ephemeral: true });
    setUserVar(message.author.id, 'Money', money - deposit);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + deposit);
    message.reply({ content: `Voc√™ depositou R$${deposit} no banco!`, ephemeral: true });
  }
});

// -bpegar
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const withdraw = parseInt(args[1]);
    if (isNaN(withdraw) || withdraw < 1) return message.reply({ content: 'Digite um valor v√°lido para retirar.', ephemeral: true });
    const bank = getUserVar(message.author.id, 'Bank');
    if (bank < withdraw) return message.reply({ content: 'Voc√™ n√£o tem esse valor no banco.', ephemeral: true });
    setUserVar(message.author.id, 'Bank', bank - withdraw);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + withdraw);
    message.reply({ content: `Voc√™ retirou R$${withdraw} do banco!`, ephemeral: true });
  }
});

// -cassino
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-cassino')) {
    const pr√™mios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
    const ganho = pr√™mios[Math.floor(Math.random() * pr√™mios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});

// -topglobal
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-topglobal')) {
    const leaderboard = Array.from(userVars.entries())
      .sort((a, b) => b[1].Money - a[1].Money)
      .slice(0, 10)
      .map(([id, vars], index) => `${index + 1}. <@${id}>: R$${vars.Money}`)
      .join('\n');
    message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true });
  }
});
// ---------- COMANDOS DE ADMIN ----------

// -clear
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-clear')) {
    if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
    const args = message.content.split(' ');
    const quantidade = parseInt(args[1]);
    if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });
    await message.channel.bulkDelete(quantidade, true);
    message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
  }
});

// -afk
const afkUsers = new Map();
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-afk')) {
    const reason = message.content.slice(4) || 'AFK';
    afkUsers.set(message.author.id, reason);
    message.reply({ content: `Voc√™ est√° agora AFK: ${reason}`, ephemeral: true });
  } else if (afkUsers.has(message.author.id)) {
    afkUsers.delete(message.author.id);
    message.reply({ content: `Bem-vindo de volta! Seu status AFK foi removido.`, ephemeral: true });
  }

  // Notificar se mencionar algu√©m AFK
  message.mentions.users.forEach(user => {
    if (afkUsers.has(user.id)) {
      message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
    }
  });
});

// -rules
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-rules')) {
    if (!message.member.permissions.has('ADMINISTRATOR')) return message.reply({ content: 'Apenas administradores podem usar este comando.', ephemeral: true });
    message.reply({ 
      content: `**Regras do servidor ü§ë**
1. Proibido üö´ 18+ (Banimento Permanente)
2. Proibido üö´ Desrespeitar Staff ou membros (Mute 30 min)
3. Proibido üö´ Falar palavras inadequadas (Mute 30 min)
4. Proibido üö´ Marcar Staff/Dono sem necessidade (Mute 30 min)
5. Proibido üö´ Marcar @everyone sem motivo (Mute 40 min)
6. Proibido üö´ Administrador abusar do poder (Ban Permanente)
7. Proibido üö´ Pedir ou doar cargos gr√°tis (Mute 30 min)
8. Proibido üö´ Dar poder de administrador indevidamente (Ban Permanente)
Leia com aten√ß√£o! ü§ì`,
      ephemeral: true
    });
  }
});
// ---------- SCRIPTS DE JOGOS ----------

const jogoImage = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821';

// -script
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-script')) {
    const row1 = new Discord.ActionRowBuilder()
      .addComponents(
        new Discord.ButtonBuilder().setCustomId('sab2').setLabel('Steal a brainrot').setStyle(Discord.ButtonStyle.Danger).setEmoji('üåü'),
        new Discord.ButtonBuilder().setCustomId('99night3').setLabel('99 Nights').setStyle(Discord.ButtonStyle.Primary).setEmoji('‚≠ê'),
        new Discord.ButtonBuilder().setCustomId('gag3').setLabel('Grow A Garden').setStyle(Discord.ButtonStyle.Primary).setEmoji('üáßüá∑'),
        new Discord.ButtonBuilder().setCustomId('blox3').setLabel('Blox Fruits').setStyle(Discord.ButtonStyle.Primary).setEmoji('üéà'),
        new Discord.ButtonBuilder().setCustomId('pag2').setLabel('P√°gina 2').setStyle(Discord.ButtonStyle.Primary).setEmoji('üìö')
      );
    message.reply({ 
      content: `Acesse o servidor oficial!\nhttps://discord.gg/jatBmGqTRR`,
      ephemeral: true,
      components: [row1],
      embeds: [
        new Discord.EmbedBuilder()
          .setTitle('Scripts de Jogos')
          .setDescription('Clique nos bot√µes abaixo para pegar os scripts')
          .setColor(0xff0000)
          .setImage(jogoImage)
          .setFooter({ text: 'BR Comunidade - https://discord.gg/jatBmGqTRR' })
      ]
    });
  }
});

// Intera√ß√µes do select menu / bot√µes de scripts
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  const ephemeralReply = { ephemeral: true };

  const scripts = {
    sab2: 'loadstring(game:HttpGet("https://yarhm.mhi.im/scr", false))()',
    '99night3': 'loadstring(game:HttpGet("https://raw.githubusercontent.com/VapeVoidware/VWExtra/main/NightsInTheForest.lua", true))()',
    gag3: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/ThunderZ-05/HUB/main/Script"))()',
    blox3: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/Tsuo7/TsuoHub/main/Tsuoscripts"))()',
    fnf3: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt"))()',
    brook3: 'loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621"))()',
    ftf: 'loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()',
    mm2: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/AlanHub/MM2Hub/main/main.lua"))()',
    mimic3: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/MimicHub/Main/main/mimic.lua"))()',
    forsaken2: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/ForsakenHub/Main/main/forsaken.lua"))()',
    bedwars2: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/BedwarsHub/Main/main/bedwars.lua"))()',
    ink2: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt"))()',
    bluelock: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()',
    piggy: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy"))()',
    fnaf: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua"))()',
    bladeball: 'loadstring(game:HttpGet("https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script"))()'
  };

  if (scripts[interaction.customId]) {
    await interaction.reply({ content: `Executando script: \`\`\`${scripts[interaction.customId]}\`\`\``, ...ephemeralReply });
  }

  // Pagina√ß√£o
  if (interaction.customId === 'pag2') {
    const row2 = new Discord.ActionRowBuilder()
      .addComponents(
        new Discord.ButtonBuilder().setCustomId('fnf3').setLabel('Funky Friday').setStyle(Discord.ButtonStyle.Primary).setEmoji('üë®‚Äçüé§'),
        new Discord.ButtonBuilder().setCustomId('brook3').setLabel('Brookhaven').setStyle(Discord.ButtonStyle.Primary).setEmoji('üá∫üá∏'),
        new Discord.ButtonBuilder().setCustomId('ftf').setLabel('Flee The Facility').setStyle(Discord.ButtonStyle.Primary).setEmoji('üî•'),
        new Discord.ButtonBuilder().setCustomId('mm2').setLabel('Murder Mystery 2').setStyle(Discord.ButtonStyle.Primary).setEmoji('üó°Ô∏è'),
        new Discord.ButtonBuilder().setCustomId('pag3').setLabel('P√°gina 3').setStyle(Discord.ButtonStyle.Primary).setEmoji('üìñ')
      );
    await interaction.update({ components: [row2], ephemeral: true });
  }

  if (interaction.customId === 'pag3') {
    const row3 = new Discord.ActionRowBuilder()
      .addComponents(
        new Discord.ButtonBuilder().setCustomId('mimic3').setLabel('Mimic (All chapters)').setStyle(Discord.ButtonStyle.Primary).setEmoji('üî•'),
        new Discord.ButtonBuilder().setCustomId('forsaken2').setLabel('Forsaken').setStyle(Discord.ButtonStyle.Primary).setEmoji('üî•'),
        new Discord.ButtonBuilder().setCustomId('bedwars2').setLabel('Bedwars').setStyle(Discord.ButtonStyle.Primary).setEmoji('üî•'),
        new Discord.ButtonBuilder().setCustomId('ink2').setLabel('Ink Game').setStyle(Discord.ButtonStyle.Primary).setEmoji('üî•'),
        new Discord.ButtonBuilder().setCustomId('pag4').setLabel('P√°gina 4').setStyle(Discord.ButtonStyle.Primary).setEmoji('üìö')
      );
    await interaction.update({ components: [row3], ephemeral: true });
  }

  if (interaction.customId === 'pag4') {
    const row4 = new Discord.ActionRowBuilder()
      .addComponents(
        new Discord.ButtonBuilder().setCustomId('bluelock').setLabel('Blue Lock').setStyle(Discord.ButtonStyle.Primary).setEmoji('‚öΩ'),
        new Discord.ButtonBuilder().setCustomId('piggy').setLabel('Piggy').setStyle(Discord.ButtonStyle.Primary).setEmoji('üê∑'),
        new Discord.ButtonBuilder().setCustomId('fnaf').setLabel('FNaF Doom').setStyle(Discord.ButtonStyle.Primary).setEmoji('üêÇ'),
        new Discord.ButtonBuilder().setCustomId('bladeball').setLabel('Blade Ball').setStyle(Discord.ButtonStyle.Primary).setEmoji('üó°Ô∏è')
      );
    await interaction.update({ components: [row4], ephemeral: true });
  }
});
// ---------- VARI√ÅVEIS DE USU√ÅRIO ----------
const userVars = {}; // Estrutura: { userId: { Money: 0, Bank: 0 } }

function getUserVar(userId, key) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][key] || 0;
}

function setUserVar(userId, key, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][key] = value;
}

// ---------- -work (di√°rio) ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-work')) {
    const cooldown = 3 * 60 * 60 * 1000; // 3 horas
    const lastWork = getUserVar(message.author.id, 'lastWork') || 0;
    const now = Date.now();
    if (now - lastWork < cooldown) {
      return message.reply({ content: `‚è≥ Espere 3 horas para o pr√≥ximo work.`, ephemeral: true });
    }
    const ganho = 150;
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    setUserVar(message.author.id, 'lastWork', now);
    message.reply({ content: `üíµ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});

// ---------- -carteira ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-carteira')) {
    const money = getUserVar(message.author.id, 'Money');
    message.reply({ content: `üí∞ Voc√™ tem R$${money}`, ephemeral: true });
  }
});

// ---------- -bank ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const valor = parseInt(args[1]);
    const money = getUserVar(message.author.id, 'Money');
    if (!valor || valor < 1) return message.reply({ content: '‚ùå Valor inv√°lido.', ephemeral: true });
    if (money < valor) return message.reply({ content: '‚ùå Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });
    setUserVar(message.author.id, 'Money', money - valor);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + valor);
    message.reply({ content: `üè¶ Voc√™ depositou R$${valor} no banco! Total no banco: R$${bank + valor}`, ephemeral: true });
  }
});

// ---------- -bpegar ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const valor = parseInt(args[1]);
    const bank = getUserVar(message.author.id, 'Bank');
    if (!valor || valor < 1) return message.reply({ content: '‚ùå Valor inv√°lido.', ephemeral: true });
    if (bank < valor) return message.reply({ content: '‚ùå Voc√™ n√£o tem tudo isso no banco.', ephemeral: true });
    setUserVar(message.author.id, 'Bank', bank - valor);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + valor);
    message.reply({ content: `üí∏ Voc√™ retirou R$${valor} do banco! Total: R$${money + valor}`, ephemeral: true });
  }
});

// ---------- -cassino ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-cassino')) {
    const premios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
    const ganho = premios[Math.floor(Math.random() * premios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    message.reply({ content: `üé∞ Voc√™ girou a roleta e ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});

// ---------- -give ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-enviar')) {
    const args = message.content.split(' ');
    const user = message.mentions.users.first();
    const amount = parseInt(args[2]);
    if (!user || !amount || amount < 1) return message.reply({ content: '‚ùå Uso: -enviar @user <valor>', ephemeral: true });
    const moneySender = getUserVar(message.author.id, 'Money');
    if (moneySender < amount) return message.reply({ content: '‚ùå Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });
    setUserVar(message.author.id, 'Money', moneySender - amount);
    const moneyReceiver = getUserVar(user.id, 'Money');
    setUserVar(user.id, 'Money', moneyReceiver + amount);
    message.reply({ content: `üí∏ Voc√™ enviou R$${amount} para ${user.username}.`, ephemeral: true });
  }
});

// ---------- -topglobal ----------
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-topglobal')) {
    const leaderboard = Object.entries(userVars)
      .sort((a, b) => b[1].Money - a[1].Money)
      .slice(0, 10)
      .map(([id, vars], index) => `${index + 1}. <@${id}>: R$${vars.Money}`)
      .join('\n');
    message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true });
  }
});
// Comandos de Administra√ß√£o

const afkUsers = new Map();

// -clear
client.on('messageCreate', async (message) => {
  if (!message.guild) return;
  if (message.content.startsWith('-clear')) {
    if (!message.member.permissions.has('MANAGE_MESSAGES')) {
      return message.reply({ content: 'Voc√™ n√£o tem permiss√£o para usar este comando.', ephemeral: true });
    }
    const args = message.content.split(' ');
    const quantidade = parseInt(args[1]);
    if (isNaN(quantidade) || quantidade < 1) {
      return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });
    }
    await message.channel.bulkDelete(quantidade, true);
    message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
  }
});

// -afk
client.on('messageCreate', async (message) => {
  if (!message.guild) return;
  if (message.content.startsWith('-afk')) {
    const reason = message.content.slice(4).trim() || 'AFK';
    afkUsers.set(message.author.id, reason);
    message.reply({ content: `Voc√™ est√° agora AFK: ${reason}`, ephemeral: true });
  } else if (afkUsers.has(message.author.id)) {
    afkUsers.delete(message.author.id);
    message.reply({ content: `Bem-vindo de volta! Seu status AFK foi removido.`, ephemeral: true });
  }

  // Notificar se mencionar algu√©m AFK
  message.mentions.users.forEach(user => {
    if (afkUsers.has(user.id)) {
      message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
    }
  });
});

// -rules
client.on('messageCreate', async (message) => {
  if (!message.guild) return;
  if (message.content.startsWith('-rules')) {
    if (!message.member.permissions.has('ADMINISTRATOR')) {
      return message.reply({ content: 'Apenas administradores podem usar este comando.', ephemeral: true });
    }
    message.reply({
      content: `**Regras do servidor BR COMUNIDADE**\n
1. Proibido üö´ 18+ (Banimento Permanente)
2. Proibido üö´ Desrespeitar Staff's ou membros (Mute 30min)
3. Proibido üö´ Palavras inadequadas (Mute 30min)
4. Proibido üö´ Marcar Staff ou dono sem motivo (Mute 30min)
5. Proibido üö´ Marcar @everyone sem necessidade (Mute 40min)
6. Proibido üö´ Abusar de poderes administrativos (Banimento Permanente)
7. Proibido üö´ Pedir cargos ou doar cargos sem autoriza√ß√£o (Mute 30min)
8. Proibido üö´ Dar poder de admin a quem n√£o tinha (Banimento Permanente)
      `,
      ephemeral: true
    });
  }
});
// Comandos de Economia

const userVars = {}; // Estrutura para armazenar Money e Bank de cada usu√°rio
const cooldownsWork = new Map();
const cooldownsCassino = new Map();

// Fun√ß√µes auxiliares
function getUserVar(userId, varName) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][varName] || 0;
}

function setUserVar(userId, varName, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][varName] = value;
}

// -work
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-work')) {
    const last = cooldownsWork.get(message.author.id) || 0;
    const now = Date.now();
    if (now - last < 3 * 60 * 60 * 1000) {
      return message.reply({ content: 'Desculpa, espere 3 horas para o pr√≥ximo trabalho.', ephemeral: true });
    }
    const currentMoney = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', currentMoney + 150);
    cooldownsWork.set(message.author.id, now);
    message.reply({ content: `üíµ Voc√™ ganhou R$150! Total: R$${currentMoney + 150}`, ephemeral: true });
  }
});

// -money / -carteira
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-money') || message.content.startsWith('-carteira')) {
    const money = getUserVar(message.author.id, 'Money');
    message.reply({ content: `üí∞ Voc√™ tem R$${money}`, ephemeral: true });
  }
});

// -bank
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    const money = getUserVar(message.author.id, 'Money');
    if (!amount || amount < 1) return message.reply({ content: 'Informe um valor v√°lido para depositar.', ephemeral: true });
    if (money < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente para depositar.', ephemeral: true });
    setUserVar(message.author.id, 'Money', money - amount);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + amount);
    message.reply({ content: `üè¶ Voc√™ depositou R$${amount} no banco. Total no banco: R$${bank + amount}`, ephemeral: true });
  }
});

// -bpegar
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    const bank = getUserVar(message.author.id, 'Bank');
    if (!amount || amount < 1) return message.reply({ content: 'Informe um valor v√°lido para retirar.', ephemeral: true });
    if (bank < amount) return message.reply({ content: 'Voc√™ n√£o tem esse valor no banco.', ephemeral: true });
    setUserVar(message.author.id, 'Bank', bank - amount);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + amount);
    message.reply({ content: `üè¶ Voc√™ retirou R$${amount} do banco. Total em dinheiro: R$${money + amount}`, ephemeral: true });
  }
});

// -give
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-give')) {
    const args = message.content.split(' ');
    const user = message.mentions.users.first();
    const amount = parseInt(args[2]);
    if (!user || !amount || amount < 1) return message.reply({ content: 'Use -give @user <valor>', ephemeral: true });
    const moneySender = getUserVar(message.author.id, 'Money');
    if (moneySender < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });
    setUserVar(message.author.id, 'Money', moneySender - amount);
    const moneyReceiver = getUserVar(user.id, 'Money');
    setUserVar(user.id, 'Money', moneyReceiver + amount);
    message.reply({ content: `üéÅ Voc√™ deu R$${amount} para ${user.username}`, ephemeral: true });
  }
});

// -topglobal
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-topglobal')) {
    const topUsers = Object.entries(userVars)
      .sort((a, b) => b[1].Money - a[1].Money)
      .slice(0, 10)
      .map(([id, vars], i) => `${i + 1}. <@${id}>: R$${vars.Money}`)
      .join('\n');
    message.reply({ content: `üèÜ Top 10 mais ricos:\n${topUsers}`, ephemeral: true });
  }
});

// -cassino
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-cassino')) {
    const last = cooldownsCassino.get(message.author.id) || 0;
    const now = Date.now();
    if (now - last < 24 * 60 * 60 * 1000) return message.reply({ content: 'Espere 24h para girar novamente.', ephemeral: true });
    const pr√™mios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
    const ganho = pr√™mios[Math.floor(Math.random() * pr√™mios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    cooldownsCassino.set(message.author.id, now);
    message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
  }
});
// ----------------- BLOCO DE JOGOS E EXECUTORES -----------------

const gameImage = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821";

// Fun√ß√£o auxiliar para enviar ephemeral com imagem
function replyGame(message, description) {
  message.reply({
    content: description,
    ephemeral: true,
    embeds: [{
      title: "Script do jogo",
      description: description,
      image: { url: gameImage },
      color: 0xff0000
    }]
  });
}

// Exemplo de intera√ß√£o para o comando -script
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  
  // ------------------- P√°gina 1 -------------------
  switch (interaction.customId) {
    case 'sab2':
      replyGame(interaction, "Steal a brainrot\n``loadstring(game:HttpGet('https://yarhm.mhi.im/scr'))()``");
      break;
    case '99night3':
      replyGame(interaction, "99 Nights\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/.../NightsInTheForest.lua'))()``");
      break;
    case 'gag3':
      replyGame(interaction, "Grow A Garden\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/.../Loader.lua'))()``");
      break;
    case 'blox3':
      replyGame(interaction, "Blox Fruits\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/.../Blox.lua'))()``");
      break;
    case 'pag2':
      // envia pr√≥xima p√°gina (pag2)
      interaction.update({
        content: "P√°gina 2 de Scripts",
        components: [
          { type: 1, components: [
            { type: 2, label: "Funky Friday", custom_id: "fnf3", style: 1, emoji: "üë®‚Äçüé§" },
            { type: 2, label: "Brookhaven", custom_id: "brook3", style: 1, emoji: "üá∫üá∏" },
            { type: 2, label: "Flee the Facility", custom_id: "ftf", style: 1, emoji: "üî•" },
            { type: 2, label: "Murder Mystery 2", custom_id: "mm2", style: 1, emoji: "üó°Ô∏è" },
            { type: 2, label: "P√°gina 3", custom_id: "pag3", style: 1, emoji: "üìñ" },
          ]}
        ]
      });
      break;
  }

  // ------------------- P√°gina 2 -------------------
  switch (interaction.customId) {
    case 'fnf3':
      replyGame(interaction, "Funky Friday\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/.../FunkyFriday.lua'))()``");
      break;
    case 'brook3':
      replyGame(interaction, "Brookhaven\n``loadstring(game:HttpGet('https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025'))()``");
      break;
    case 'ftf':
      replyGame(interaction, "Flee the Facility\n``loadstring(game:HttpGet('https://pastefy.app/JJVhs3rK/raw'))()``");
      break;
    case 'mm2':
      replyGame(interaction, "Murder Mystery 2\n``loadstring(game:HttpGet('https://pastefy.app/MM2Script/raw'))()``");
      break;
    case 'pag3':
      // envia p√°gina 3
      interaction.update({
        content: "P√°gina 3 de Scripts",
        components: [
          { type: 1, components: [
            { type: 2, label: "Mimic (All Chapters)", custom_id: "mimic3", style: 1, emoji: "üî•" },
            { type: 2, label: "Forsaken", custom_id: "forsaken2", style: 1, emoji: "üî•" },
            { type: 2, label: "Bedwars", custom_id: "bedwars2", style: 1, emoji: "üî•" },
            { type: 2, label: "Ink Game", custom_id: "ink2", style: 1, emoji: "üî•" },
            { type: 2, label: "P√°gina 4", custom_id: "pag4", style: 1, emoji: "üìö" },
          ]}
        ]
      });
      break;
  }

  // ------------------- P√°gina 3 -------------------
  switch (interaction.customId) {
    case 'mimic3':
      replyGame(interaction, "Mimic (All Chapters)\n``loadstring(game:HttpGet('https://pastefy.app/mimic_all/raw'))()``");
      break;
    case 'forsaken2':
      replyGame(interaction, "Forsaken\n``loadstring(game:HttpGet('https://pastefy.app/forsaken/raw'))()``");
      break;
    case 'bedwars2':
      replyGame(interaction, "Bedwars\n``loadstring(game:HttpGet('https://pastefy.app/bedwars/raw'))()``");
      break;
    case 'ink2':
      replyGame(interaction, "Ink Game\n``loadstring(game:HttpGet('https://pastefy.app/ink/raw'))()``");
      break;
    case 'pag4':
      // envia p√°gina 4
      interaction.update({
        content: "P√°gina 4 de Scripts",
        components: [
          { type: 1, components: [
            { type: 2, label: "Blue Lock", custom_id: "bluelock", style: 1, emoji: "‚öΩ" },
            { type: 2, label: "Piggy", custom_id: "piggy", style: 1, emoji: "üê∑" },
            { type: 2, label: "FNaF Doom", custom_id: "fnaf", style: 1, emoji: "üêÇ" },
            { type: 2, label: "Blade Ball", custom_id: "bladeball", style: 1, emoji: "üó°Ô∏è" },
          ]}
        ]
      });
      break;
  }

  // ------------------- P√°gina 4 -------------------
  switch (interaction.customId) {
    case 'bluelock':
      replyGame(interaction, "Blue Lock\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/alan11ago/Hub/main/ImpHub.lua'))()``");
      break;
    case 'piggy':
      replyGame(interaction, "Piggy\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/BalintTheDevXBack/Games/main/Piggy'))()``");
      break;
    case 'fnaf':
      replyGame(interaction, "FNaF Doom\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua'))()``");
      break;
    case 'bladeball':
      replyGame(interaction, "Blade Ball\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/main/Blade-Ball-Script'))()``");
      break;
  }
});
// ----------------- BLOCO DE COMANDOS UNIVERSAIS / EXECUTORES -----------------

const executorImage = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821";

function replyExecutor(interaction, description) {
  interaction.reply({
    content: description,
    ephemeral: true,
    embeds: [{
      title: "Executor",
      description: description,
      image: { url: executorImage },
      color: 0xff0000
    }]
  });
}

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  switch (interaction.customId) {
    case 'jmod':
      replyExecutor(interaction, "JMod Hub\n``loadstring(game:HttpGet('https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764'))()``");
      break;
    case 'infyield':
      replyExecutor(interaction, "Infinite Yield\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()``");
      break;
    case 'nameless':
      replyExecutor(interaction, "Nameless Admin\n``loadstring(game:HttpGet('https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source'))()``");
      break;
  }
});
// ----------------- BLOCO DE COMANDOS DE ECONOMIA / ADMIN -----------------

const economyImage = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821";

// Usu√°rios e vari√°veis (simulando armazenamento simples)
const userVars = {};

// Fun√ß√£o utilit√°ria para pegar vari√°vel de usu√°rio
function getUserVar(userId, varName) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][varName] || 0;
}

// Fun√ß√£o utilit√°ria para setar vari√°vel de usu√°rio
function setUserVar(userId, varName, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][varName] = value;
}

// Fun√ß√£o para reply com embed e ephemeral
function ephemeralReply(message, description) {
  message.reply({
    content: description,
    ephemeral: true,
    embeds: [{
      title: "Economia/Admin",
      description: description,
      image: { url: economyImage },
      color: 0xff0000
    }]
  });
}

// ---------------- COMANDOS DE ECONOMIA -----------------

client.on('messageCreate', async (message) => {
  const args = message.content.split(' ');
  const command = args[0];

  if (command === '-work') {
    const ganho = 150;
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    ephemeralReply(message, `Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`);
  }

  if (command === '-carteira') {
    const money = getUserVar(message.author.id, 'Money');
    ephemeralReply(message, `Sua carteira: R$${money}`);
  }

  if (command === '-bank') {
    const value = parseInt(args[1]);
    if (!value || value < 1) return ephemeralReply(message, "Valor inv√°lido!");
    const money = getUserVar(message.author.id, 'Money');
    if (money < value) return ephemeralReply(message, "Voc√™ n√£o tem dinheiro suficiente!");
    setUserVar(message.author.id, 'Money', money - value);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + value);
    ephemeralReply(message, `Voc√™ depositou R$${value} no banco.`);
  }

  if (command === '-bpegar') {
    const value = parseInt(args[1]);
    if (!value || value < 1) return ephemeralReply(message, "Valor inv√°lido!");
    const bank = getUserVar(message.author.id, 'Bank');
    if (bank < value) return ephemeralReply(message, "Voc√™ n√£o tem tanto dinheiro no banco!");
    setUserVar(message.author.id, 'Bank', bank - value);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + value);
    ephemeralReply(message, `Voc√™ retirou R$${value} do banco.`);
  }

  if (command === '-give') {
    const mention = message.mentions.users.first();
    const value = parseInt(args[2]);
    if (!mention || !value || value < 1) return ephemeralReply(message, "Uso correto: -give @user <quantia>");
    const money = getUserVar(message.author.id, 'Money');
    if (money < value) return ephemeralReply(message, "Voc√™ n√£o tem dinheiro suficiente!");
    setUserVar(message.author.id, 'Money', money - value);
    const targetMoney = getUserVar(mention.id, 'Money');
    setUserVar(mention.id, 'Money', targetMoney + value);
    ephemeralReply(message, `Voc√™ enviou R$${value} para ${mention.username}`);
  }

  if (command === '-cassino') {
    const premios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
    const ganho = premios[Math.floor(Math.random() * premios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    ephemeralReply(message, `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`);
  }

  if (command === '-topglobal') {
    const leaderboard = Object.entries(userVars)
      .sort((a, b) => b[1].Money - a[1].Money)
      .slice(0, 10)
      .map(([id, vars], index) => `${index + 1}. <@${id}>: R$${vars.Money}`)
      .join('\n');
    ephemeralReply(message, `üèÜ Top 10 mais ricos:\n${leaderboard}`);
  }
});

// ---------------- COMANDOS DE ADMIN -----------------

client.on('messageCreate', async (message) => {
  if (!message.member.permissions.has('ADMINISTRATOR')) return;

  const args = message.content.split(' ');
  const command = args[0];

  if (command === '-clear') {
    const quantidade = parseInt(args[1]);
    if (!quantidade || quantidade < 1) return ephemeralReply(message, "Informe um n√∫mero v√°lido.");
    await message.channel.bulkDelete(quantidade, true);
    ephemeralReply(message, `${quantidade} mensagens apagadas.`);
  }

  if (command === '-rules') {
    ephemeralReply(message, `
**Regras do Servidor BR COMUNIDADE**
1. Proibido conte√∫do 18+.
2. Respeitar todos.
3. N√£o flood/mensagens inadequadas.
4. N√£o marcar staff desnecessariamente.
5. Proibido abusos de poderes.
`);
  }
});
// ----------------- BLOCO DE JOGOS / SCRIPTS -----------------

const gameImage = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821";

// Fun√ß√£o utilit√°ria para envio de embeds ephemerais
function ephemeralGameReply(message, title, description) {
  message.reply({
    embeds: [{
      title: title,
      description: description,
      color: 0xff0000,
      image: { url: gameImage }
    }],
    ephemeral: true
  });
}

// ----------------- OnInteraction: Scripts -----------------
client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const id = interaction.customId;

  // --- P√°gina 1 ---
  if (id === 'sab2') {
    ephemeralGameReply(interaction, "Steal a Brainrot", "``loadstring(game:HttpGet('https://pastefy.app/JJVhs3rK/raw'))()``");
  }
  if (id === '99night3') {
    ephemeralGameReply(interaction, "99 Nights", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/H4xScripts/Loader/refs/heads/main/loader.lua', true))()``");
  }
  if (id === 'gag3') {
    ephemeralGameReply(interaction, "Grow A Garden", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/og2xn/AirHubs/refs/heads/main/Protected_3429231241525986.lua'))()``");
  }
  if (id === 'blox3') {
    ephemeralGameReply(interaction, "Blox Fruits", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Tsuo7/TsuoHub/main/Tsuoscripts'))()``");
  }

  // --- P√°gina 2 ---
  if (id === 'fnf3') {
    ephemeralGameReply(interaction, "Funky Friday", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt'))()``");
  }
  if (id === 'brook3') {
    ephemeralGameReply(interaction, "Brookhaven", "``loadstring(game:HttpGet('https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621'))()``");
  }
  if (id === 'ftf') {
    ephemeralGameReply(interaction, "Flee The Facility", "``loadstring(game:HttpGet('https://pastefy.app/JJVhs3rK/raw'))()``");
  }
  if (id === 'mm2') {
    ephemeralGameReply(interaction, "Murder Mystery 2", "``loadstring(game:HttpGet('https://rawscripts.net/raw/MM2-Script'))()``");
  }

  // --- P√°gina 3 ---
  if (id === 'mimic3') {
    ephemeralGameReply(interaction, "Mimic (All Chapters)", "``loadstring(game:HttpGet('https://pastefy.app/MimicFull'))()``");
  }
  if (id === 'forsaken2') {
    ephemeralGameReply(interaction, "Forsaken", "``loadstring(game:HttpGet('https://pastefy.app/Forsaken'))()``");
  }
  if (id === 'bedwars2') {
    ephemeralGameReply(interaction, "BedWars", "``loadstring(game:HttpGet('https://pastefy.app/BedWars'))()``");
  }
  if (id === 'ink2') {
    ephemeralGameReply(interaction, "Ink Game", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt'))()``");
  }

  // --- P√°gina 4 ---
  if (id === 'bluelock') {
    ephemeralGameReply(interaction, "Blue Lock", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/BlueLock/Script/main/Loader.lua'))()``");
  }
  if (id === 'piggy') {
    ephemeralGameReply(interaction, "Piggy", "``loadstring(game:HttpGet('https://rawscripts.net/raw/PiggyHub'))()``");
  }
  if (id === 'fnaf') {
    ephemeralGameReply(interaction, "FNaF Doom", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua'))()``");
  }
  if (id === 'bladeball') {
    ephemeralGameReply(interaction, "Blade Ball", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script'))()``");
  }

  // --- Universal Scripts ---
  if (id === 'jmod') {
    ephemeralGameReply(interaction, "JMod Hub", "``loadstring(game:HttpGet('https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764'))()``");
  }
  if (id === 'infyield') {
    ephemeralGameReply(interaction, "Infinite Yield", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()``");
  }
  if (id === 'nameless') {
    ephemeralGameReply(interaction, "Nameless Admin", "``loadstring(game:HttpGet('https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source'))()``");
  }
});
// ----------------- BLOCO DE ECONOMIA -----------------

const userVars = {}; // Estrutura para armazenar Money e Bank

// Fun√ß√£o utilit√°ria para pegar vari√°vel do usu√°rio
function getUserVar(userId, varName) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][varName] || 0;
}

// Fun√ß√£o utilit√°ria para setar vari√°vel do usu√°rio
function setUserVar(userId, varName, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][varName] = value;
}

// -work
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-work')) return;
  const money = getUserVar(message.author.id, 'Money');
  setUserVar(message.author.id, 'Money', money + 150);
  message.reply({ content: `Voc√™ ganhou R$150. Total: R$${money + 150}`, ephemeral: true });
});

// -carteira
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-carteira')) return;
  const money = getUserVar(message.author.id, 'Money');
  message.reply({ content: `Voc√™ tem R$${money}`, ephemeral: true });
});

// -bank
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-bank')) return;
  const args = message.content.split(' ');
  const value = parseInt(args[1]);
  if (isNaN(value) || value < 1) return message.reply({ content: "Valor inv√°lido.", ephemeral: true });
  const money = getUserVar(message.author.id, 'Money');
  if (money < value) return message.reply({ content: "Voc√™ n√£o tem dinheiro suficiente.", ephemeral: true });
  setUserVar(message.author.id, 'Money', money - value);
  setUserVar(message.author.id, 'Bank', getUserVar(message.author.id, 'Bank') + value);
  message.reply({ content: `Voc√™ depositou R$${value} no banco.`, ephemeral: true });
});

// -bpegar
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-bpegar')) return;
  const args = message.content.split(' ');
  const value = parseInt(args[1]);
  const bank = getUserVar(message.author.id, 'Bank');
  if (isNaN(value) || value < 1 || bank < value) return message.reply({ content: "Voc√™ n√£o pode sacar isso.", ephemeral: true });
  setUserVar(message.author.id, 'Bank', bank - value);
  setUserVar(message.author.id, 'Money', getUserVar(message.author.id, 'Money') + value);
  message.reply({ content: `Voc√™ retirou R$${value} do banco.`, ephemeral: true });
});

// -give
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-enviar')) return;
  const args = message.content.split(' ');
  const user = message.mentions.users.first();
  const amount = parseInt(args[2]);
  if (!user || isNaN(amount) || amount < 1) return message.reply({ content: "Uso: -enviar @user <quantia>", ephemeral: true });
  const senderMoney = getUserVar(message.author.id, 'Money');
  if (senderMoney < amount) return message.reply({ content: "Voc√™ n√£o tem dinheiro suficiente.", ephemeral: true });
  setUserVar(message.author.id, 'Money', senderMoney - amount);
  setUserVar(user.id, 'Money', getUserVar(user.id, 'Money') + amount);
  message.reply({ content: `Voc√™ enviou R$${amount} para ${user.username}`, ephemeral: true });
});

// -cassino
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-cassino')) return;
  const pr√™mios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
  const ganho = pr√™mios[Math.floor(Math.random() * pr√™mios.length)];
  const money = getUserVar(message.author.id, 'Money');
  setUserVar(message.author.id, 'Money', money + ganho);
  message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money + ganho}`, ephemeral: true });
});

// -topglobal
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-topglobal')) return;
  const leaderboard = Object.entries(userVars)
    .sort((a,b) => b[1].Money - a[1].Money)
    .slice(0,10)
    .map(([id, vars], index) => `${index+1}. <@${id}>: R$${vars.Money}`)
    .join('\n');
  message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true });
});
// ----------------- BLOCO DE ADMIN & UTILIDADES -----------------

// -clear
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-clear')) return;
  if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
  const args = message.content.split(' ');
  const quantidade = parseInt(args[1]);
  if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });
  await message.channel.bulkDelete(quantidade, true);
  message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
});

// -afk
const afkUsers = new Map();
client.on('messageCreate', async message => {
  if (message.content.startsWith('-afk')) {
    const reason = message.content.slice(4) || 'AFK';
    afkUsers.set(message.author.id, reason);
    message.reply({ content: `Voc√™ est√° agora AFK: ${reason}`, ephemeral: true });
  } else if (afkUsers.has(message.author.id)) {
    afkUsers.delete(message.author.id);
    message.reply({ content: `Bem-vindo de volta! Seu status AFK foi removido.`, ephemeral: true });
  }

  // Notificar se mencionar algu√©m AFK
  message.mentions.users.forEach(user => {
    if (afkUsers.has(user.id)) {
      message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
    }
  });
});

// -rules
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-rules')) return;
  if (!message.member.permissions.has('ADMINISTRATOR')) return message.reply({ content: 'Apenas administradores podem usar este comando.', ephemeral: true });
  message.reply({ 
    content: `**Regras do servidor ü§ë**
1. Proibido üö´ 18+ (Banimentos Permanentes)
2. Proibido üö´ Desrespeitar Staff ou membros (Mutamento 30 min)
3. Proibido üö´ Palavras inadequadas (Mutamento 30 min)
4. Proibido üö´ Marcar Staff ou Dono sem motivo (Mutamento 30 min)
5. Proibido üö´ Marcar @everyone sem motivo (Mutamento 40 min)
6. Proibido üö´ Abusar do poder como administrador (Banimento)
7. Proibido üö´ Pedir ou doar cargos gr√°tis (Mutamento 30 min)
8. Proibido üö´ Dar poder de administrador indevido (Banimento)
> Leia atentamente!`, ephemeral: true
  });
});

// -script (mostrando bot√µes dos jogos)
client.on('messageCreate', async message => {
  if (!message.content.startsWith('-script')) return;

  const row1 = new Discord.MessageActionRow()
    .addComponents(
      new Discord.MessageButton().setCustomId('sab2').setLabel('Steal a brainrot').setStyle('DANGER').setEmoji('üåü'),
      new Discord.MessageButton().setCustomId('99night3').setLabel('99nights').setStyle('PRIMARY').setEmoji('‚≠ê'),
      new Discord.MessageButton().setCustomId('gag3').setLabel('Grow A Garden').setStyle('PRIMARY').setEmoji('üáßüá∑'),
      new Discord.MessageButton().setCustomId('blox3').setLabel('Blox fruits').setStyle('PRIMARY').setEmoji('üéà'),
      new Discord.MessageButton().setCustomId('pag2').setLabel('P√°gina 2').setStyle('PRIMARY').setEmoji('üìö')
    );

  message.reply({ 
    content: '**Scripts de jogos dispon√≠veis!**\nAcesse o servidor oficial: https://discord.gg/6t5ga4NT', 
    ephemeral: true,
    components: [row1],
    files: ['https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?width=1232&height=821']
  });
});
// ----------------- BLOCO DE ON INTERACTION - PAGINAS E JOGOS -----------------

client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const imgURL = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?width=1232&height=821';

  // ---------- PAGINAS ----------
  if (interaction.customId === 'pag2') {
    const row = new Discord.MessageActionRow()
      .addComponents(
        new Discord.MessageButton().setCustomId('fnf3').setLabel('Funky Friday').setStyle('PRIMARY').setEmoji('üë®‚Äçüé§'),
        new Discord.MessageButton().setCustomId('brook3').setLabel('Brookhaven').setStyle('PRIMARY').setEmoji('üá∫üá∏'),
        new Discord.MessageButton().setCustomId('ftf').setLabel('Flee the Facility').setStyle('PRIMARY').setEmoji('üî•'),
        new Discord.MessageButton().setCustomId('mm2').setLabel('Murder Mystery 2').setStyle('PRIMARY').setEmoji('üó°Ô∏è'),
        new Discord.MessageButton().setCustomId('pag3').setLabel('Pr√≥xima p√°gina').setStyle('PRIMARY').setEmoji('üìñ')
      );

    await interaction.reply({ content: 'Jogos dispon√≠veis na p√°gina 2:', ephemeral: true, components: [row], files: [imgURL] });
  }

  if (interaction.customId === 'pag3') {
    const row = new Discord.MessageActionRow()
      .addComponents(
        new Discord.MessageButton().setCustomId('mimic3').setLabel('Mimic (All chapters)').setStyle('PRIMARY').setEmoji('üî•'),
        new Discord.MessageButton().setCustomId('forsaken2').setLabel('Forsaken').setStyle('PRIMARY').setEmoji('üî•'),
        new Discord.MessageButton().setCustomId('bedwars2').setLabel('Bedwars').setStyle('PRIMARY').setEmoji('üî•'),
        new Discord.MessageButton().setCustomId('ink2').setLabel('Ink Game').setStyle('PRIMARY').setEmoji('üî•'),
        new Discord.MessageButton().setCustomId('pag4').setLabel('Pr√≥xima p√°gina').setStyle('PRIMARY').setEmoji('üìö')
      );

    await interaction.reply({ content: 'Scripts dispon√≠veis na p√°gina 3:', ephemeral: true, components: [row], files: [imgURL] });
  }

  if (interaction.customId === 'pag4') {
    const row = new Discord.MessageActionRow()
      .addComponents(
        new Discord.MessageButton().setCustomId('bluelock').setLabel('Blue Lock').setStyle('PRIMARY').setEmoji('‚öΩ'),
        new Discord.MessageButton().setCustomId('piggy').setLabel('Piggy').setStyle('PRIMARY').setEmoji('üê∑'),
        new Discord.MessageButton().setCustomId('fnaf').setLabel('FNaF Doom').setStyle('PRIMARY').setEmoji('üêÇ'),
        new Discord.MessageButton().setCustomId('bladeball').setLabel('Blade Ball').setStyle('PRIMARY').setEmoji('üó°Ô∏è')
      );

    await interaction.reply({ content: 'Escolha um jogo para pegar o script:', ephemeral: true, components: [row], files: [imgURL] });
  }

  // ---------- EXEMPLO DE EXECUTOR ----------
  if (interaction.customId === 'fnf3') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt"))()``', ephemeral: true, files: [imgURL] });
  }

  if (interaction.customId === 'brook3') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621"))()``', ephemeral: true, files: [imgURL] });
  }

  if (interaction.customId === 'ftf') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()``', ephemeral: true, files: [imgURL] });
  }

  if (interaction.customId === 'mm2') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/MM2-Hub-Latest"))()``', ephemeral: true, files: [imgURL] });
  }
});
// ----------------- BLOCO DE ON INTERACTION - OUTROS EXECUTORES -----------------

client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const imgURL = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?width=1232&height=821';

  // ---------- Mimic ----------
  if (interaction.customId === 'mimic3') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/MimicHub/Mimic-All-Chapters.lua"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Forsaken ----------
  if (interaction.customId === 'forsaken2') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/ForsakenHub/Forsaken.lua"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Bedwars ----------
  if (interaction.customId === 'bedwars2') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/BedwarsHub/Bedwars.lua"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Ink Game ----------
  if (interaction.customId === 'ink2') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/InkGameHub/InkGame.lua"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Blue Lock ----------
  if (interaction.customId === 'bluelock') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Piggy ----------
  if (interaction.customId === 'piggy') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- FNaF Doom ----------
  if (interaction.customId === 'fnaf') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Blade Ball ----------
  if (interaction.customId === 'bladeball') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Steal a Brainrot ----------
  if (interaction.customId === 'sab2') {
    await interaction.reply({ content: '``local src = ""\n\nlocal CoreGui = game:GetService("StarterGui")\npcall(function() \n    src = game:HttpGet("https://yarhm.mhi.im/scr", false)\nend)\nif src == "" then\n  CoreGui:SetCore("SendNotification", {\n      Title = "YARHM Outage";\n      Text = "YARHM Online is currently unavailable! Using YARHM Offline.";\n      Duration = 5;\n  })\n  src = game:HttpGet("https://raw.githubusercontent.com/Joystickplays/psychic-octo-invention/main/source/yarhm/1.19/yarhm.lua", false)\nend\n\nloadstring(src)()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- 99 Nights ----------
  if (interaction.customId === '99night3') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/H4xScripts/Loader/refs/heads/main/loader.lua", true))()``', ephemeral: true, files: [imgURL] });
  }
});
// ----------------- BLOCO DE ON INTERACTION - JOGOS RESTANTES -----------------

client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  const imgURL = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?width=1232&height=821';

  // ---------- Flee the Facility ----------
  if (interaction.customId === 'ftf') {
    const ftfScripts = {
      miranda: '``loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()``',
      lennon: '``loadstring(game:HttpGet("https://pastefy.app/MJw2J4T6/raw"))()``',
      liphyr: '``loadstring(game:HttpGet("https://pastefy.app/9fgffG4l/raw"))()``',
      mkz: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/murilolol/nslx-autojoiner/refs/heads/main/free.lua"))()``',
      vortex: '``key = "here your key"\nloadstring(game:HttpGet("https://backend.unban.cc/api/lua/loader"))()``',
      naburu: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/NaburuHub/NaburuHub/refs/heads/main/HubNaburu.lua"))()``',
      float: '``loadstring(game:HttpGet("https://gist.githubusercontent.com/g65626172-eng/4e9bc989191d19f5903abc5b2c5692e0/raw/07e6f3d8393da10c91512d69f6b629d5679a7a38/gistfile1.txt"))()``',
      nameless: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/ily123950/Hopper/refs/heads/main/releaseass.txt"))()``',
      killer: '``loadstring(game:HttpGet("https://pastefy.app/RfArY2M3/raw"))()``',
      control: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/onliengamerop/Steal-a-brainrot/refs/heads/main/Protected_3771863424757750.lua.txt"))()``',
      chilli: '``loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/a3e13a4a85ac4c2da17a6baab051ee1b.lua"))()``',
      hopper: '``_G.NSLX_KEY = "FREE"\nloadstring(game:HttpGet("https://raw.githubusercontent.com/murilolol/nslx-autojoiner/refs/heads/main/nslx%20x%20mkz.lua"))()``',
      wick: '``loadstring(game:HttpGet("https://w1ckllon.com/brainrot/Finder.lua"))()``',
      kurd: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Ninja10908/S4/refs/heads/main/Kurdhub"))()``',
      epsillon: '``loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/24a30c9b5fc50ca02c5d6de6f7e5be5e.lua"))()``',
      trax: '``loadstring(game:HttpGet("https://gitlab.com/traxscriptss/traxscriptss/-/raw/main/visual2.lua"))()``'
    };

    if (ftfScripts[interaction.customId]) {
      await interaction.reply({ content: ftfScripts[interaction.customId], ephemeral: true, files: [imgURL] });
    }
  }

  // ---------- Murder Mystery 2 ----------
  if (interaction.customId === 'mm2') {
    await interaction.reply({ content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/MM2-Yarhm-Hub"))()``', ephemeral: true, files: [imgURL] });
  }

  // ---------- Brookhaven ----------
  if (interaction.customId === 'brook3') {
    const brookScripts = {
      cartola: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621"))()``',
      coquette: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-Coquette-Hub-41921"))()``',
      rael: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-Raelhub-V4-35615"))()``',
      chaos: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-Chaos-hub-45641"))()``',
      nyt: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-Nytherune-Hub-43881"))()``'
    };
    if (brookScripts[interaction.customId]) {
      await interaction.reply({ content: brookScripts[interaction.customId], ephemeral: true, files: [imgURL] });
    }
  }

  // ---------- Funky Friday ----------
  if (interaction.customId === 'fnf3') {
    const fnfScripts = {
      rael: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt"))()``',
      nadir: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Nadir3709/RandomScript/main/FunkyFridayMobile"))()``'
    };
    if (fnfScripts[interaction.customId]) {
      await interaction.reply({ content: fnfScripts[interaction.customId], ephemeral: true, files: [imgURL] });
    }
  }

  // ---------- Fish ----------
  if (interaction.customId === 'fish') {
    const fishScripts = {
      native: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Superman245/sc2/refs/heads/main/s6"))()``',
      alchemy: '``loadstring(game:HttpGet("https://scripts.alchemyhub.xyz"))()``',
      banana: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Catto-YFCN/Lunor_Dependencies/refs/heads/main/Loader"))()``',
      ronix: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/RadeonScripts/RadeonHubMain/main/MainRobloxExploit"))()``',
      eclipse: '``loadstring(Game:HttpGet("https://raw.githubusercontent.com/yolobradda/eclipsefisch/refs/heads/main/eclipsefisch"))()``',
      black: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Fisch-Blackhub-Updated-zones-and-events-52148"))()``'
    };
    if (fishScripts[interaction.customId]) {
      await interaction.reply({ content: fishScripts[interaction.customId], ephemeral: true, files: [imgURL] });
    }
  }

  // ---------- Universal ----------
  if (interaction.customId === 'universal') {
    const universalScripts = {
      jmod: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764"))()``',
      infyield: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()``',
      nameless: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()``'
    };
    if (universalScripts[interaction.customId]) {
      await interaction.reply({ content: universalScripts[interaction.customId], ephemeral: true, files: [imgURL] });
    }
  }
});
// ----------------- BLOCO DE ECONOMIA E ADMIN -----------------

const imgURL = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?width=1232&height=821';

// Vari√°veis dos usu√°rios
const userVars = {}; // Estrutura: { userId: { Money: 0, Bank: 0 } }

// Fun√ß√µes utilit√°rias
function getUserVar(userId, varName) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][varName] || 0;
}

function setUserVar(userId, varName, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][varName] = value;
}

// ---------- -work ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-work')) {
    const currentMoney = getUserVar(message.author.id, 'Money');
    const ganho = 150;
    setUserVar(message.author.id, 'Money', currentMoney + ganho);
    await message.reply({ content: `üíµ Voc√™ ganhou R$${ganho}. Total: R$${currentMoney + ganho}`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -carteira ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-carteira')) {
    const money = getUserVar(message.author.id, 'Money');
    await message.reply({ content: `üí∞ Voc√™ tem R$${money}`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -give ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-enviar')) {
    const args = message.content.split(' ');
    const target = message.mentions.users.first();
    const amount = parseInt(args[2]);
    if (!target || isNaN(amount)) return message.reply({ content: 'Uso: -enviar @user <quantia>', ephemeral: true });

    const senderMoney = getUserVar(message.author.id, 'Money');
    if (senderMoney < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });

    setUserVar(message.author.id, 'Money', senderMoney - amount);
    const targetMoney = getUserVar(target.id, 'Money');
    setUserVar(target.id, 'Money', targetMoney + amount);

    await message.reply({ content: `üí∏ Voc√™ enviou R$${amount} para ${target.username}`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -bank ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    if (isNaN(amount) || amount < 1) return message.reply({ content: 'Valor inv√°lido para depositar.', ephemeral: true });

    const money = getUserVar(message.author.id, 'Money');
    if (money < amount) return message.reply({ content: 'Voc√™ n√£o tem dinheiro suficiente.', ephemeral: true });

    setUserVar(message.author.id, 'Money', money - amount);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + amount);

    await message.reply({ content: `üè¶ Voc√™ depositou R$${amount} no banco.`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -bpegar ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    if (isNaN(amount) || amount < 1) return message.reply({ content: 'Valor inv√°lido para sacar.', ephemeral: true });

    const bank = getUserVar(message.author.id, 'Bank');
    if (bank < amount) return message.reply({ content: 'Voc√™ n√£o tem tanto no banco.', ephemeral: true });

    setUserVar(message.author.id, 'Bank', bank - amount);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + amount);

    await message.reply({ content: `üíµ Voc√™ retirou R$${amount} do banco.`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -cassino ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-cassino')) {
    const premios = [200, 220, 400, 3100, 2000, 500, 100, 3000, 2500, 100, 600];
    const ganho = premios[Math.floor(Math.random() * premios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    await message.reply({ content: `üé∞ Voc√™ girou a roleta e ganhou R$${ganho}. Total: R$${money + ganho}`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -topglobal ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-topglobal')) {
    const leaderboard = Object.entries(userVars)
      .sort(([, a], [, b]) => b.Money - a.Money)
      .slice(0, 10)
      .map(([id, vars], index) => `${index + 1}. <@${id}>: R$${vars.Money}`)
      .join('\n');

    await message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -clear ----------
client.on('messageCreate', async message => {
  if (message.content.startsWith('-clear')) {
    if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o.', ephemeral: true });
    const args = message.content.split(' ');
    const qtd = parseInt(args[1]);
    if (isNaN(qtd) || qtd < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido.', ephemeral: true });
    await message.channel.bulkDelete(qtd, true);
    await message.reply({ content: `üßπ ${qtd} mensagens apagadas.`, ephemeral: true, files: [imgURL] });
  }
});

// ---------- -afk ----------
const afkUsers = new Map();
client.on('messageCreate', async message => {
  if (message.content.startsWith('-afk')) {
    const reason = message.content.slice(4) || 'AFK';
    afkUsers.set(message.author.id, reason);
    await message.reply({ content: `Voc√™ est√° AFK agora: ${reason}`, ephemeral: true, files: [imgURL] });
  } else if (afkUsers.has(message.author.id)) {
    afkUsers.delete(message.author.id);
    await message.reply({ content: 'Bem-vindo de volta! AFK removido.', ephemeral: true, files: [imgURL] });
  }

  message.mentions.users.forEach(user => {
    if (afkUsers.has(user.id)) {
      message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true, files: [imgURL] });
    }
  });
});
// ----------------- BLOCO DE JOGOS E ONINTERACTIONS -----------------

const gameImg = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?width=1232&height=821';

// Fun√ß√£o utilit√°ria para enviar scripts de jogos
async function sendGameScript(message, name, url) {
  await message.reply({
    content: `**${name}**\n\`\`\`lua\nloadstring(game:HttpGet("${url}"))()\`\`\``,
    ephemeral: true,
    files: [gameImg]
  });
}

// ---------- Universal Scripts ----------
client.on('interactionCreate', async interaction => {
  if (!interaction.isSelectMenu()) return;
  if (interaction.customId === 'universal') {
    switch (interaction.values[0]) {
      case 'jmod':
        await sendGameScript(interaction, 'JMod Hub', 'https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764');
        break;
      case 'infyield':
        await sendGameScript(interaction, 'Infinite Yield', 'https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source');
        break;
      case 'nameless':
        await sendGameScript(interaction, 'Nameless Admin', 'https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source');
        break;
    }
  }
});

// ---------- Flee The Facility ----------
client.on('interactionCreate', async interaction => {
  if (!interaction.isButton()) return;

  switch (interaction.customId) {
    case 'miranda':
      await sendGameScript(interaction, 'Miranda', 'https://pastefy.app/JJVhs3rK/raw');
      break;
    case 'lennon':
      await sendGameScript(interaction, 'Lennon', 'https://pastefy.app/MJw2J4T6/raw');
      break;
    case 'liphyr':
      await sendGameScript(interaction, 'Liphyr', 'https://pastefy.app/9fgffG4l/raw');
      break;
    case 'mkz':
      await sendGameScript(interaction, 'MKZ', 'https://raw.githubusercontent.com/murilolol/nslx-autojoiner/refs/heads/main/free.lua');
      break;
    case 'vortex':
      await sendGameScript(interaction, 'Vortex', 'https://backend.unban.cc/api/lua/loader');
      break;
    case 'naburu':
      await sendGameScript(interaction, 'Naburu', 'https://raw.githubusercontent.com/NaburuHub/NaburuHub/refs/heads/main/HubNaburu.lua');
      break;
    case 'float':
      await sendGameScript(interaction, 'Float', 'https://gist.githubusercontent.com/g65626172-eng/4e9bc989191d19f5903abc5b2c5692e0/raw/07e6f3d8393da10c91512d69f6b629d5679a7a38/gistfile1.txt');
      break;
    case 'nameless':
      await sendGameScript(interaction, 'Nameless', 'https://raw.githubusercontent.com/ily123950/Hopper/refs/heads/main/releaseass.txt');
      break;
    case 'killer':
      await sendGameScript(interaction, 'Killer', 'https://pastefy.app/RfArY2M3/raw');
      break;
    case 'control':
      await sendGameScript(interaction, 'Control', 'https://raw.githubusercontent.com/onliengamerop/Steal-a-brainrot/refs/heads/main/Protected_3771863424757750.lua.txt');
      break;
    case 'chilli':
      await sendGameScript(interaction, 'Chilli', 'https://api.luarmor.net/files/v3/loaders/a3e13a4a85ac4c2da17a6baab051ee1b.lua');
      break;
    case 'hopper':
      await sendGameScript(interaction, 'Hopper', 'https://raw.githubusercontent.com/murilolol/nslx-autojoiner/refs/heads/main/nslx%20x%20mkz.lua');
      break;
    case 'wick':
      await sendGameScript(interaction, 'Wick', 'https://w1ckllon.com/brainrot/Finder.lua');
      break;
    case 'kurd':
      await sendGameScript(interaction, 'Kurd', 'https://raw.githubusercontent.com/Ninja10908/S4/refs/heads/main/Kurdhub');
      break;
    case 'epsillon':
      await sendGameScript(interaction, 'Epsillon', 'https://api.luarmor.net/files/v3/loaders/24a30c9b5fc50ca02c5d6de6f7e5be5e.lua');
      break;
    case 'trax':
      await sendGameScript(interaction, 'Trax', 'https://gitlab.com/traxscriptss/traxscriptss/-/raw/main/visual2.lua');
      break;
  }
});
// -work
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-work')) {
    let money = getUserVar(message.author.id, 'Money') || 0;
    money += 150;
    setUserVar(message.author.id, 'Money', money);
    message.reply({ content: `${message.author.username}, voc√™ ganhou R$150! Total: R$${money}`, ephemeral: true });
  }
});

// -carteira
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-carteira')) {
    const money = getUserVar(message.author.id, 'Money') || 0;
    message.reply({ content: `üí∞ Voc√™ tem: R$${money}`, ephemeral: true });
  }
});

// -give
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-give')) {
    const args = message.content.split(' ');
    const user = message.mentions.users.first();
    const amount = parseInt(args[2]);
    if (!user || isNaN(amount)) return message.reply('Uso correto: -give @usu√°rio <valor>');
    let senderMoney = getUserVar(message.author.id, 'Money') || 0;
    if (senderMoney < amount) return message.reply('Voc√™ n√£o tem dinheiro suficiente.');
    senderMoney -= amount;
    setUserVar(message.author.id, 'Money', senderMoney);
    let receiverMoney = getUserVar(user.id, 'Money') || 0;
    receiverMoney += amount;
    setUserVar(user.id, 'Money', receiverMoney);
    message.reply({ content: `${user.username} recebeu R$${amount} de ${message.author.username}`, ephemeral: true });
  }
});

// -bank
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    if (isNaN(amount)) return message.reply('Voc√™ precisa informar um valor.');
    let money = getUserVar(message.author.id, 'Money') || 0;
    if (money < amount) return message.reply('Voc√™ n√£o tem esse valor.');
    let bank = getUserVar(message.author.id, 'Bank') || 0;
    money -= amount;
    bank += amount;
    setUserVar(message.author.id, 'Money', money);
    setUserVar(message.author.id, 'Bank', bank);
    message.reply({ content: `üí≥ Voc√™ depositou R$${amount} no banco!`, ephemeral: true });
  }
});

// -bpegar
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const amount = parseInt(args[1]);
    if (isNaN(amount)) return message.reply('Voc√™ precisa informar um valor.');
    let bank = getUserVar(message.author.id, 'Bank') || 0;
    if (bank < amount) return message.reply('Voc√™ n√£o tem esse valor no banco.');
    let money = getUserVar(message.author.id, 'Money') || 0;
    bank -= amount;
    money += amount;
    setUserVar(message.author.id, 'Bank', bank);
    setUserVar(message.author.id, 'Money', money);
    message.reply({ content: `üí∏ Voc√™ retirou R$${amount} do banco!`, ephemeral: true });
  }
});
// -script
client.on('messageCreate', async (message) => {
  if (message.content.startsWith('-script')) {
    const embed = {
      title: '**Scripts de Steal a Brainrot**',
      description: 'Acesse o servidor oficial!\nhttps://discord.gg/6t5ga4NT',
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' },
      footer: { text: 'https://discord.gg/6t5ga4NT' }
    };
    message.reply({ embeds: [embed], ephemeral: true });
  }
});

// onInteraction: p√°gina 1
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const game = interaction.customId;

  if (game === 'sab2') interaction.reply({ content: '-sab', ephemeral: true });
  else if (game === '99night3') interaction.reply({ content: '-99night', ephemeral: true });
  else if (game === 'gag3') interaction.reply({ content: '-gag', ephemeral: true });
  else if (game === 'blox3') interaction.reply({ content: '-blox', ephemeral: true });
  else if (game === 'pag2') {
    const embed = {
      title: 'Pag 2',
      description: 'Jogos abaixo',
      color: 0xff0000
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Funky Friday', style: 1, custom_id: 'fnf3' },
        { type: 2, label: 'Brookhaven', style: 1, custom_id: 'brook3' },
        { type: 2, label: 'Flee the Facility', style: 1, custom_id: 'ftf' },
        { type: 2, label: 'Murder Mystery 2', style: 1, custom_id: 'mm2' },
        { type: 2, label: 'Pr√≥xima P√°gina', style: 1, custom_id: 'pag3' }
      ]}
    ]});
  }
});

// onInteraction: p√°gina 2
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const game = interaction.customId;

  if (game === 'fnf3') interaction.reply({ content: '-fnf', ephemeral: true });
  else if (game === 'brook3') interaction.reply({ content: '-brook', ephemeral: true });
  else if (game === 'ftf') interaction.reply({ content: '-ftf', ephemeral: true });
  else if (game === 'mm2') interaction.reply({ content: '-mm2', ephemeral: true });
  else if (game === 'pag3') {
    const embed = {
      title: 'Pag 3',
      description: 'Escolha um jogo',
      color: 0xff0000
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Mimic (All Chapters)', style: 1, custom_id: 'mimic3' },
        { type: 2, label: 'Forsaken', style: 1, custom_id: 'forsaken2' },
        { type: 2, label: 'Bedwars', style: 1, custom_id: 'bedwars2' },
        { type: 2, label: 'Ink Game', style: 1, custom_id: 'ink2' },
        { type: 2, label: 'Pr√≥xima P√°gina', style: 1, custom_id: 'pag4' }
      ]}
    ]});
  }
});
// onInteraction: p√°gina 3
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const game = interaction.customId;

  if (game === 'mimic3') interaction.reply({ content: '-mimic', ephemeral: true });
  else if (game === 'forsaken2') interaction.reply({ content: '-forsaken', ephemeral: true });
  else if (game === 'bedwars2') interaction.reply({ content: '-bedwars', ephemeral: true });
  else if (game === 'ink2') interaction.reply({ content: '-ink', ephemeral: true });
  else if (game === 'pag4') {
    const embed = {
      title: 'Pag 4',
      description: 'Escolha um jogo antes de pegar o script',
      color: 0xff0000,
      footer: { text: '√öltima P√°gina' },
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' }
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Blue Lock', style: 1, custom_id: 'bluelock' },
        { type: 2, label: 'Piggy', style: 1, custom_id: 'piggy' },
        { type: 2, label: 'FNaF Doom', style: 1, custom_id: 'fnaf' },
        { type: 2, label: 'Blade Ball', style: 1, custom_id: 'bladeball' }
      ]}
    ]});
  }
});

// onInteraction: p√°gina 4 ‚Äì executores e scripts de jogos
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  // Blue Lock
  if (id === 'bluelock') {
    interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()``', ephemeral: true });
  }
  // Piggy
  else if (id === 'piggy') {
    interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy"))()``', ephemeral: true });
  }
  // FNaF Doom
  else if (id === 'fnaf') {
    interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua"))()``', ephemeral: true });
  }
  // Blade Ball
  else if (id === 'bladeball') {
    interaction.reply({ content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script"))()``', ephemeral: true });
  }
});
// onInteraction: Flee The Facility (FTF), Brookhaven, MM2, Funky Friday
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  // Flee The Facility
  if (id === 'ftf') {
    const embed = {
      title: 'Flee The Facility Scripts',
      description: 'Escolha um executor:',
      color: 0xff0000,
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' }
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Miranda', style: 1, custom_id: 'miranda' },
        { type: 2, label: 'Lennon', style: 1, custom_id: 'lennon' },
        { type: 2, label: 'Liphyr', style: 1, custom_id: 'liphyr' },
        { type: 2, label: 'MKZ', style: 1, custom_id: 'mkz' },
        { type: 2, label: 'Vortex', style: 1, custom_id: 'vortex' }
      ]}
    ]});
  }

  // Brookhaven
  else if (id === 'brook3') {
    const embed = {
      title: 'Brookhaven Scripts',
      description: 'Escolha um executor:',
      color: 0xff0000,
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' }
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Cartola', style: 1, custom_id: 'cartola' },
        { type: 2, label: 'Coquette', style: 1, custom_id: 'coquette' },
        { type: 2, label: 'Rael', style: 1, custom_id: 'rael' },
        { type: 2, label: 'Chaos', style: 1, custom_id: 'chaos' },
        { type: 2, label: 'NYT', style: 1, custom_id: 'nyt' }
      ]}
    ]});
  }

  // Murder Mystery 2
  else if (id === 'mm2') {
    interaction.reply({ content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/MM2-Yarhm-Hub"))()``', ephemeral: true });
  }

  // Funky Friday
  else if (id === 'fnf3') {
    const embed = {
      title: 'Funky Friday Scripts',
      description: 'Escolha um executor:',
      color: 0xff0000,
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' }
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Rael', style: 1, custom_id: 'fnf_rael' },
        { type: 2, label: 'Nadir', style: 1, custom_id: 'fnf_nadir' }
      ]}
    ]});
  }
});
// onInteraction: Fish Scripts
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'fish') {
    const embed = {
      title: 'Fish Scripts',
      description: 'Escolha um executor:',
      color: 0xff0000,
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' }
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'Native Hub', style: 1, custom_id: 'native' },
        { type: 2, label: 'Alchemy Hub', style: 1, custom_id: 'alchemy' },
        { type: 2, label: 'Banana Cat', style: 1, custom_id: 'banana' },
        { type: 2, label: 'Ronix Hub', style: 1, custom_id: 'ronix' },
        { type: 2, label: 'Eclipse Hub', style: 1, custom_id: 'eclipse' },
        { type: 2, label: 'Black Hub', style: 1, custom_id: 'black' }
      ]}
    ]});
  }
});

// onInteraction: Universal Scripts
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'universal') {
    const embed = {
      title: 'Universal Scripts',
      description: 'Escolha um executor:',
      color: 0xff0000,
      image: { url: 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png' }
    };
    interaction.update({ embeds: [embed], components: [
      { type: 1, components: [
        { type: 2, label: 'JMod Hub', style: 1, custom_id: 'jmod' },
        { type: 2, label: 'Infinite Yield', style: 1, custom_id: 'infyield' },
        { type: 2, label: 'Nameless Admin', style: 1, custom_id: 'nameless' }
      ]}
    ]});
  }
});

// Handlers for individual Fish executors
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  const fishScripts = {
    native: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Superman245/sc2/refs/heads/main/s6"))()``',
    alchemy: '``loadstring(game:HttpGet("https://scripts.alchemyhub.xyz"))()``',
    banana: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Catto-YFCN/Lunor_Dependencies/refs/heads/main/Loader"))()``',
    ronix: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/RadeonScripts/RadeonHubMain/main/MainRobloxExploit"))()``',
    eclipse: '``loadstring(Game:HttpGet("https://raw.githubusercontent.com/yolobradda/eclipsefisch/refs/heads/main/eclipsefisch"))()``',
    black: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Fisch-Blackhub-Updated-zones-and-events-52148"))()``'
  };

  if (fishScripts[id]) {
    interaction.reply({ content: fishScripts[id], ephemeral: true });
  }
});

// Handlers for individual Universal executors
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  const universalScripts = {
    jmod: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764"))()``',
    infyield: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()``',
    nameless: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()``'
  };

  if (universalScripts[id]) {
    interaction.reply({ content: universalScripts[id], ephemeral: true });
  }
});
// onInteraction: Blue Lock
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'bluelock') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Piggy
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'piggy') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: FNaF Doom
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'fnaf') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Blade Ball
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'bladeball') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Ringta
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'ringta') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/wefwef127382/inkgames.github.io/refs/heads/main/ringta.lua"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Azure
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'azure') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt"))()``',
      ephemeral: true
    });
  }
});

// Adicionando a imagem padr√£o para todos os comandos de jogos
const gameImage = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png';
// onInteraction: Flee The Facility
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'ftf') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Brookhaven
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'brook') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Murder Mystery 2
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'mm2') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/MM2-Loader"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Mimic (All Chapters)
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'mimic') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Mimic-All-Chapters"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Forsaken
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'forsaken') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Forsaken-Hub"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Bedwars
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'bedwars') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Bedwars-Hub"))()``',
      ephemeral: true
    });
  }
});

// onInteraction: Ink Game
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  const id = interaction.customId;

  if (id === 'ink') {
    interaction.reply({
      content: '``loadstring(game:HttpGet("https://rawscripts.net/raw/Ink-Game-Hub"))()``',
      ephemeral: true
    });
  }
});

// Imagem padr√£o para todos os comandos de jogos
const gameImage = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png';
// Vari√°veis globais dos usu√°rios
const userVars = {}; // Ex: { userId: { Money: 0, Bank: 0 } }

// Fun√ß√µes auxiliares
function getUserVar(userId, key) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  return userVars[userId][key] || 0;
}

function setUserVar(userId, key, value) {
  if (!userVars[userId]) userVars[userId] = { Money: 0, Bank: 0 };
  userVars[userId][key] = value;
}

// imagem padr√£o
const gameImage = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png';

// --- ECONOMIA ---

// -work
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-work')) {
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + 150);
    message.reply({ content: `Voc√™ ganhou R$150! Total: R$${money + 150}`, ephemeral: true });
  }
});

// -carteira
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-carteira')) {
    const money = getUserVar(message.author.id, 'Money');
    message.reply({ content: `Voc√™ tem R$${money}`, ephemeral: true });
  }
});

// -bank
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-bank')) {
    const args = message.content.split(' ');
    const value = parseInt(args[1]);
    if (isNaN(value) || value < 1) return message.reply({ content: 'Valor inv√°lido', ephemeral: true });
    const money = getUserVar(message.author.id, 'Money');
    if (money < value) return message.reply({ content: 'Dinheiro insuficiente', ephemeral: true });
    setUserVar(message.author.id, 'Money', money - value);
    const bank = getUserVar(message.author.id, 'Bank');
    setUserVar(message.author.id, 'Bank', bank + value);
    message.reply({ content: `Voc√™ depositou R$${value} no banco.`, ephemeral: true });
  }
});

// -bpegar
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-bpegar')) {
    const args = message.content.split(' ');
    const value = parseInt(args[1]);
    if (isNaN(value) || value < 1) return message.reply({ content: 'Valor inv√°lido', ephemeral: true });
    const bank = getUserVar(message.author.id, 'Bank');
    if (bank < value) return message.reply({ content: 'Saldo insuficiente no banco', ephemeral: true });
    setUserVar(message.author.id, 'Bank', bank - value);
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + value);
    message.reply({ content: `Voc√™ retirou R$${value} do banco.`, ephemeral: true });
  }
});

// -give
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-give')) {
    const args = message.content.split(' ');
    const userMention = message.mentions.users.first();
    const amount = parseInt(args[2]);
    if (!userMention || isNaN(amount)) return message.reply({ content: 'Uso: -give @user <quantia>', ephemeral: true });
    const giverMoney = getUserVar(message.author.id, 'Money');
    if (giverMoney < amount) return message.reply({ content: 'Dinheiro insuficiente', ephemeral: true });
    setUserVar(message.author.id, 'Money', giverMoney - amount);
    const receiverMoney = getUserVar(userMention.id, 'Money');
    setUserVar(userMention.id, 'Money', receiverMoney + amount);
    message.reply({ content: `Voc√™ deu R$${amount} para ${userMention.username}`, ephemeral: true });
  }
});

// -cassino
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-cassino')) {
    const premios = [200,220,400,3100,2000,500,100,3000,2500,100,600];
    const ganho = premios[Math.floor(Math.random() * premios.length)];
    const money = getUserVar(message.author.id, 'Money');
    setUserVar(message.author.id, 'Money', money + ganho);
    message.reply({ content: `üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money+ganho}`, ephemeral: true });
  }
});

// -topglobal
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-topglobal')) {
    const leaderboard = Object.entries(userVars)
      .sort((a,b)=>b[1].Money - a[1].Money)
      .slice(0,10)
      .map(([id,vars],index)=>`${index+1}. <@${id}>: R$${vars.Money}`)
      .join('\n');
    message.reply({ content: `üèÜ Top 10 mais ricos:\n${leaderboard}`, ephemeral: true });
  }
});

// --- ADMIN ---

// -clear
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-clear')) {
    if (!message.member.permissions.has('MANAGE_MESSAGES')) return message.reply({ content: 'Voc√™ n√£o tem permiss√£o', ephemeral: true });
    const args = message.content.split(' ');
    const quantidade = parseInt(args[1]);
    if (isNaN(quantidade) || quantidade < 1) return message.reply({ content: 'Informe um n√∫mero v√°lido', ephemeral: true });
    message.channel.bulkDelete(quantidade,true);
    message.reply({ content: `üßπ ${quantidade} mensagens apagadas.`, ephemeral: true });
  }
});

// -afk
const afkUsers = new Map();
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-afk')) {
    const reason = message.content.slice(4) || 'AFK';
    afkUsers.set(message.author.id, reason);
    message.reply({ content: `Voc√™ est√° agora AFK: ${reason}`, ephemeral: true });
  } else if (afkUsers.has(message.author.id)) {
    afkUsers.delete(message.author.id);
    message.reply({ content: `Bem-vindo de volta! Seu AFK foi removido.`, ephemeral: true });
  }
  message.mentions.users.forEach(user => {
    if (afkUsers.has(user.id)) message.reply({ content: `${user.username} est√° AFK: ${afkUsers.get(user.id)}`, ephemeral: true });
  });
});

// -rules
client.on('messageCreate', (message) => {
  if (message.content.startsWith('-rules')) {
    if (!message.member.permissions.has('ADMINISTRATOR')) return message.reply({ content: 'Apenas administradores', ephemeral: true });
    message.reply({ content: `Regras do servidor:
1. Proibido 18+
2. N√£o desrespeitar Staff
3. Palavras inadequadas proibidas
4. N√£o marcar Staff ou dono
5. N√£o usar @everyone
6. Admins n√£o podem abusar
7. N√£o mendigar cargos
8. N√£o dar poderes indevidos`, ephemeral: true });
  }
});
const { ActivityType } = require('discord.js');

client.once('ready', () => {
  console.log(`Logado como ${client.user.tag}!`);
  client.user.setPresence({
    activities: [{ name: 'Roblox', type: ActivityType.Playing }],
    status: 'online'
  });
});

const GAME_IMAGE = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png';

// mapeamento centralizado: bot√£o/selectId -> lua loadstring (ou texto)
const SCRIPT_MAP = {
  // 99 nights / sab / gag / blox etc
  sab2: `local src = ""
local CoreGui = game:GetService("StarterGui")
pcall(function() src = game:HttpGet("https://yarhm.mhi.im/scr", false) end)
if src == "" then CoreGui:SetCore("SendNotification",{Title="YARHM Outage";Text="YARHM Online is currently unavailable! Using offline.";Duration=5;})
src = game:HttpGet("https://raw.githubusercontent.com/Joystickplays/psychic-octo-invention/main/source/yarhm/1.19/yarhm.lua", false) end
loadstring(src)()`,
  '99night3': `loadstring(game:HttpGet("https://raw.githubusercontent.com/H4xScripts/Loader/refs/heads/main/loader.lua", true))()`,
  gag3: `loadstring(game:HttpGet("https://raw.githubusercontent.com/og2xn/AirHubs/refs/heads/main/Protected_3429231241525986.lua"))()`,
  blox3: `loadstring(game:HttpGet("https://raw.githubusercontent.com/Tsuo7/TsuoHub/main/Tsuoscripts"))()`,

  // page2
  fnf3: `loadstring(game:HttpGet("https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt"))()`,
  brook3: `loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621"))()`,
  ftf: `loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()`,
  mm2: `loadstring(game:HttpGet("https://rawscripts.net/raw/MM2-Yarhm-Hub"))()`,

  // page3
  mimic3: `loadstring(game:HttpGet("https://pastefy.app/mimic_all/raw"))()`,
  forsaken2: `loadstring(game:HttpGet("https://pastefy.app/forsaken/raw"))()`,
  bedwars2: `loadstring(game:HttpGet("https://pastefy.app/bedwars/raw"))()`,
  ink2: `loadstring(game:HttpGet("https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt"))()`,

  // page4
  bluelock: `loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()`,
  piggy: `loadstring(game:HttpGet("https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy"))()`,
  fnaf: `loadstring(game:HttpGet("https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua"))()`,
  bladeball: `loadstring(game:HttpGet("https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script"))()`,

  // FTF submenu items (IDs must match buttons you created)
  miranda: `loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()`,
  lennon: `loadstring(game:HttpGet("https://pastefy.app/MJw2J4T6/raw"))()`,
  liphyr: `loadstring(game:HttpGet("https://pastefy.app/9fgffG4l/raw"))()`,
  mkz: `loadstring(game:HttpGet("https://raw.githubusercontent.com/murilolol/nslx-autojoiner/refs/heads/main/free.lua"))()`,
  vortex: `-- Vortex requires a key; visit https://vortex.unban.cc/dashboard to get it\nkey = "here your key"\nloadstring(game:HttpGet("https://backend.unban.cc/api/lua/loader"))()`,

  // Fish submenu
  native: `loadstring(game:HttpGet("https://raw.githubusercontent.com/Superman245/sc2/refs/heads/main/s6"))()`,
  alchemy: `loadstring(game:HttpGet("https://scripts.alchemyhub.xyz"))()`,
  banana: `loadstring(game:HttpGet("https://raw.githubusercontent.com/Catto-YFCN/Lunor_Dependencies/refs/heads/main/Loader"))()`,
  ronix: `loadstring(game:HttpGet("https://raw.githubusercontent.com/RadeonScripts/RadeonHubMain/main/MainRobloxExploit"))()`,
  eclipse: `loadstring(game:HttpGet("https://raw.githubusercontent.com/yolobradda/eclipsefisch/refs/heads/main/eclipsefisch"))()`,
  black: `loadstring(game:HttpGet("https://rawscripts.net/raw/Fisch-Blackhub-Updated-zones-and-events-52148"))()`,

  // Universal
  jmod: `loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764"))()`,
  infyield: `loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()`,
  nameless: `loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()`,

  // extra single scripts
  '7days': `loadstring(game:HttpGet("https://rawscripts.net/raw/7-Days-To-Live-7-days-to-live-38787"))()`,
  ringta: `loadstring(game:HttpGet("https://raw.githubusercontent.com/wefwef127382/inkgames.github.io/refs/heads/main/ringta.lua"))()`,
  azure: `loadstring(game:HttpGet("https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt"))()`
};

// fun√ß√£o utilit√°ria para responder com embed + imagem (ephemeral)
async function replyScriptEphemeral(interaction, title, content) {
  try {
    await interaction.reply({
      embeds: [{
        title: title,
        description: `\`\`\`lua\n${content}\n\`\`\``,
        color: 0xff0000,
        image: { url: GAME_IMAGE }
      }],
      ephemeral: true
    });
  } catch (err) {
    // se j√° respondeu, tenta followUp
    try { await interaction.followUp({ content: `\`\`\`lua\n${content}\n\`\`\``, ephemeral: true }); } catch {}
  }
}

// √∫nica listener robusta para intera√ß√µes (bot√µes + select menus)
client.on('interactionCreate', async (interaction) => {
  try {
    if (interaction.isStringSelectMenu()) {
      const id = interaction.customId;
      const value = interaction.values[0];
      if (id === 'universal' && SCRIPT_MAP[value]) {
        return await replyScriptEphemeral(interaction, 'Executor Universal', SCRIPT_MAP[value]);
      }
      // outros select menus podem ser mapeados aqui
      return;
    }

    if (!interaction.isButton()) return;

    const id = interaction.customId;

    // pagina√ß√£o: quando o usu√°rio clica para mudar a p√°gina a gente edita (update) s√≥ a mensagem original
    if (id === 'pag2') {
      const components = [
        { type: 1, components: [
          { type: 2, custom_id: 'fnf3', label: 'Funky Friday', style: 1, emoji: 'üë®‚Äçüé§' },
          { type: 2, custom_id: 'brook3', label: 'Brookhaven', style: 1, emoji: 'üá∫üá∏' },
          { type: 2, custom_id: 'ftf', label: 'Flee the Facility', style: 1, emoji: 'üî•' },
          { type: 2, custom_id: 'mm2', label: 'Murder Mystery 2', style: 1, emoji: 'üó°Ô∏è' },
          { type: 2, custom_id: 'pag3', label: 'Pr√≥xima p√°gina', style: 1, emoji: 'üìñ' }
        ]}
      ];
      return await interaction.update({
        embeds: [{ title: 'P√°gina 2 ‚Äî Scripts', description: 'Escolha um jogo', color: 0xff0000, image: { url: GAME_IMAGE } }],
        components
      });
    }

    if (id === 'pag3') {
      const components = [
        { type: 1, components: [
          { type: 2, custom_id: 'mimic3', label: 'Mimic (All chapters)', style: 1, emoji: 'üî•' },
          { type: 2, custom_id: 'forsaken2', label: 'Forsaken', style: 1, emoji: 'üî•' },
          { type: 2, custom_id: 'bedwars2', label: 'Bedwars', style: 1, emoji: 'üî•' },
          { type: 2, custom_id: 'ink2', label: 'Ink Game', style: 1, emoji: 'üî•' },
          { type: 2, custom_id: 'pag4', label: 'Pr√≥xima p√°gina', style: 1, emoji: 'üìö' }
        ]}
      ];
      return await interaction.update({
        embeds: [{ title: 'P√°gina 3 ‚Äî Scripts', description: 'Escolha um jogo', color: 0xff0000, image: { url: GAME_IMAGE } }],
        components
      });
    }

    if (id === 'pag4') {
      const components = [
        { type: 1, components: [
          { type: 2, custom_id: 'bluelock', label: 'Blue Lock', style: 1, emoji: '‚öΩ' },
          { type: 2, custom_id: 'piggy', label: 'Piggy', style: 1, emoji: 'üê∑' },
          { type: 2, custom_id: 'fnaf', label: 'FNaF Doom', style: 1, emoji: 'üêÇ' },
          { type: 2, custom_id: 'bladeball', label: 'Blade Ball', style: 1, emoji: 'üó°Ô∏è' }
        ]}
      ];
      return await interaction.update({
        embeds: [{ title: 'P√°gina 4 ‚Äî Scripts', description: 'Escolha um jogo', color: 0xff0000, footer: { text: '√öltima p√°gina' }, image: { url: GAME_IMAGE } }],
        components
      });
    }

    // se o id tem um script associado, envia como ephemeral
    if (SCRIPT_MAP[id]) {
      return await replyScriptEphemeral(interaction, `Script ‚Äî ${id}`, SCRIPT_MAP[id]);
    }

    // caso n√£o encontrado
    await interaction.reply({ content: 'Script ou a√ß√£o n√£o encontrada para esse bot√£o.', ephemeral: true });
  } catch (err) {
    console.error('Erro em interactionCreate:', err);
    try { if (!interaction.replied) await interaction.reply({ content: 'Ocorreu um erro ao processar a intera√ß√£o.', ephemeral: true }); } catch {}
  }
});
const { Client, GatewayIntentBits, ActivityType } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

const GAME_IMAGE = 'https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821';
const userVars = {};
const afkUsers = new Map();

function getUserVar(userId, key) { if(!userVars[userId]) userVars[userId] = { Money:0, Bank:0 }; return userVars[userId][key]||0; }
function setUserVar(userId, key, value) { if(!userVars[userId]) userVars[userId] = { Money:0, Bank:0 }; userVars[userId][key]=value; }

const SCRIPT_MAP = {
  sab2:`local src="";local CoreGui=game:GetService("StarterGui");pcall(function() src=game:HttpGet("https://yarhm.mhi.im/scr",false) end);if src=="" then CoreGui:SetCore("SendNotification",{Title="YARHM Outage";Text="YARHM Online is currently unavailable! Using offline.";Duration=5;});src=game:HttpGet("https://raw.githubusercontent.com/Joystickplays/psychic-octo-invention/main/source/yarhm/1.19/yarhm.lua",false) end;loadstring(src)()`,
  '99night3':`loadstring(game:HttpGet("https://raw.githubusercontent.com/H4xScripts/Loader/refs/heads/main/loader.lua",true))()`,
  gag3:`loadstring(game:HttpGet("https://raw.githubusercontent.com/og2xn/AirHubs/refs/heads/main/Protected_3429231241525986.lua"))()`,
  blox3:`loadstring(game:HttpGet("https://raw.githubusercontent.com/Tsuo7/TsuoHub/main/Tsuoscripts"))()`,
  fnf3:`loadstring(game:HttpGet("https://raw.githubusercontent.com/Laelmano24/Rael-Hub/main/main.txt"))()`,
  brook3:`loadstring(game:HttpGet("https://rawscripts.net/raw/Brookhaven-RP-cartola-hub-update-2025-50621"))()`,
  ftf:`loadstring(game:HttpGet("https://pastefy.app/JJVhs3rK/raw"))()`,
  mm2:`loadstring(game:HttpGet("https://rawscripts.net/raw/MM2-Yarhm-Hub"))()`,
  mimic3:`loadstring(game:HttpGet("https://pastefy.app/mimic_all/raw"))()`,
  forsaken2:`loadstring(game:HttpGet("https://pastefy.app/forsaken/raw"))()`,
  bedwars2:`loadstring(game:HttpGet("https://pastefy.app/bedwars/raw"))()`,
  ink2:`loadstring(game:HttpGet("https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt"))()`,
  bluelock:`loadstring(game:HttpGet("https://raw.githubusercontent.com/alan11ago/Hub/refs/heads/main/ImpHub.lua"))()`,
  piggy:`loadstring(game:HttpGet("https://raw.githubusercontent.com/BalintTheDevXBack/Games/refs/heads/main/Piggy"))()`,
  fnaf:`loadstring(game:HttpGet("https://raw.githubusercontent.com/liigmabalz/Projetos_Lua/main/FNaF_Doom2.lua"))()`,
  bladeball:`loadstring(game:HttpGet("https://raw.githubusercontent.com/Akash1al/Blade-Ball-Updated-Script/refs/heads/main/Blade-Ball-Script"))()`,
  native:`loadstring(game:HttpGet("https://raw.githubusercontent.com/Superman245/sc2/refs/heads/main/s6"))()`,
  alchemy:`loadstring(game:HttpGet("https://scripts.alchemyhub.xyz"))()`,
  banana:`loadstring(game:HttpGet("https://raw.githubusercontent.com/Catto-YFCN/Lunor_Dependencies/refs/heads/main/Loader"))()`,
  ronix:`loadstring(game:HttpGet("https://raw.githubusercontent.com/RadeonScripts/RadeonHubMain/main/MainRobloxExploit"))()`,
  eclipse:`loadstring(game:HttpGet("https://raw.githubusercontent.com/yolobradda/eclipsefisch/refs/heads/main/eclipsefisch"))()`,
  black:`loadstring(game:HttpGet("https://rawscripts.net/raw/Fisch-Blackhub-Updated-zones-and-events-52148"))()`,
  jmod:`loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Jmods-Universal-38764"))()`,
  infyield:`loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()`,
  nameless:`loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))()`,
  '7days':`loadstring(game:HttpGet("https://rawscripts.net/raw/7-Days-To-Live-7-days-to-live-38787"))()`,
  ringta:`loadstring(game:HttpGet("https://raw.githubusercontent.com/wefwef127382/inkgames.github.io/refs/heads/main/ringta.lua"))()`,
  azure:`loadstring(game:HttpGet("https://raw.githubusercontent.com/ScripterVaz/InkGameAzure/main/Protected_7974105512464815.lua.txt"))()`
};

async function replyScript(interaction, title, content){
  try{
    await interaction.reply({
      embeds:[{title,description:`\`\`\`lua\n${content}\n\`\`\``,color:0xff0000,image:{url:GAME_IMAGE}}],
      ephemeral:true
    });
  }catch(e){
    try{await interaction.followUp({content:`\`\`\`lua\n${content}\n\`\`\``,ephemeral:true});}catch{}
  }
}

client.once('ready',()=>{
  console.log(`Logado como ${client.user.tag}`);
  client.user.setPresence({activities:[{name:"Roblox",type:ActivityType.Playing}],status:'online'});
});

client.on('interactionCreate',async interaction=>{
  if(interaction.isStringSelectMenu()){
    const id=interaction.customId;
    const value=interaction.values[0];
    if(SCRIPT_MAP[value]) return replyScript(interaction,value,SCRIPT_MAP[value]);
    return;
  }
  if(!interaction.isButton()) return;
  const id=interaction.customId;

  if(id==='pag2'){
    return interaction.update({embeds:[{title:'P√°gina 2 ‚Äî Scripts',description:'Escolha um jogo',color:0xff0000,image:{url:GAME_IMAGE}}],components:[{type:1,components:[
      {type:2,custom_id:'fnf3',label:'Funky Friday',style:1,emoji:'üë®‚Äçüé§'},
      {type:2,custom_id:'brook3',label:'Brookhaven',style:1,emoji:'üá∫üá∏'},
      {type:2,custom_id:'ftf',label:'Flee the Facility',style:1,emoji:'üî•'},
      {type:2,custom_id:'mm2',label:'Murder Mystery 2',style:1,emoji:'üó°Ô∏è'},
      {type:2,custom_id:'pag3',label:'Pr√≥xima p√°gina',style:1,emoji:'üìñ'}
    ]}]);
  }
  if(id==='pag3'){
    return interaction.update({embeds:[{title:'P√°gina 3 ‚Äî Scripts',description:'Escolha um jogo',color:0xff0000,image:{url:GAME_IMAGE}}],components:[{type:1,components:[
      {type:2,custom_id:'mimic3',label:'Mimic (All chapters)',style:1,emoji:'üî•'},
      {type:2,custom_id:'forsaken2',label:'Forsaken',style:1,emoji:'üî•'},
      {type:2,custom_id:'bedwars2',label:'Bedwars',style:1,emoji:'üî•'},
      {type:2,custom_id:'ink2',label:'Ink Game',style:1,emoji:'üî•'},
      {type:2,custom_id:'pag4',label:'Pr√≥xima p√°gina',style:1,emoji:'üìö'}
    ]}]);
  }
  if(id==='pag4'){
    return interaction.update({embeds:[{title:'P√°gina 4 ‚Äî Scripts',description:'Escolha um jogo',color:0xff0000,footer:{text:'√öltima p√°gina'},image:{url:GAME_IMAGE}}],components:[{type:1,components:[
      {type:2,custom_id:'bluelock',label:'Blue Lock',style:1,emoji:'‚öΩ'},
      {type:2,custom_id:'piggy',label:'Piggy',style:1,emoji:'üê∑'},
      {type:2,custom_id:'fnaf',label:'FNaF Doom',style:1,emoji:'üêÇ'},
      {type:2,custom_id:'bladeball',label:'Blade Ball',style:1,emoji:'üó°Ô∏è'}
    ]}]);
  }

  if(SCRIPT_MAP[id]) return replyScript(interaction,id,SCRIPT_MAP[id]);
  await interaction.reply({content:'Script ou a√ß√£o n√£o encontrada para esse bot√£o.',ephemeral:true});
});

client.on('messageCreate',async message=>{
  if(message.author.bot) return;

  if(message.content.startsWith('-cassino')){
    const pr√™mios=[200,220,400,3100,2000,500,100,3000,2500,100,600];
    const ganho=pr√™mios[Math.floor(Math.random()*pr√™mios.length)];
    const money=getUserVar(message.author.id,'Money');
    setUserVar(message.author.id,'Money',money+ganho);
    return message.reply({content:`üé∞ Voc√™ ganhou R$${ganho}! Total: R$${money+ganho}`,ephemeral:true});
  }

  if(message.content.startsWith('-topglobal')){
    const leaderboard=Object.entries(userVars).sort((a,b)=>b[1].Money-a[1].Money).slice(0,10).map(([id,v],i)=>`${i+1}. <@${id}>: R$${v.Money}`).join('\n');
    return message.reply
    // Requer discord.js v14+
const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, EmbedBuilder } = require('discord.js');
const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

// Fun√ß√£o auxiliar para enviar embed com imagem
function sendGameEmbed(interaction, title, description, image) {
  const embed = new EmbedBuilder()
    .setTitle(title)
    .setDescription(description)
    .setColor(0xff0000)
    .setImage(image)
    .setTimestamp();
  interaction.reply({ embeds: [embed], ephemeral: true });
}

// ---------- Interactions P√°ginas de Jogos ----------
client.on('interactionCreate', async interaction => {
  if (!interaction.isButton() && !interaction.isStringSelectMenu()) return;

  // Link da imagem padr√£o
  const imgLink = "https://media.discordapp.net/attachments/1411478273895956510/1411831493810192575/assets2Ftask_01k40rgh0jefr9581zb437b3ss2F1756667449_img_0.png?ex=68da574a&is=68d905ca&hm=40801e0e7f43c936d63ec694cebeb98ffcd75c6947c06c2ca3cf771f7994013c&width=1232&height=821";

  // --------- P√°gina 1 ----------
  if (interaction.customId === 'pag1' || interaction.customId === 'script') {
    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder().setCustomId('sab2').setLabel('Steal a Brainrot').setStyle(ButtonStyle.Danger),
        new ButtonBuilder().setCustomId('99night3').setLabel('99 Nights').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('gag3').setLabel('Grow A Garden').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('blox3').setLabel('Blox Fruits').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('pag2').setLabel('P√°gina 2').setStyle(ButtonStyle.Primary)
      );
    await interaction.update({ content: 'Jogos p√°gina 1', components: [row] });
  }

  // --------- P√°gina 2 ----------
  if (interaction.customId === 'pag2') {
    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder().setCustomId('fnf3').setLabel('Funky Friday').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('brook3').setLabel('Brookhaven').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('ftf').setLabel('Flee The Facility').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('mm2').setLabel('Murder Mystery 2').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('pag3').setLabel('P√°gina 3').setStyle(ButtonStyle.Primary)
      );
    await interaction.update({ content: 'Jogos p√°gina 2', components: [row] });
  }

  // --------- P√°gina 3 ----------
  if (interaction.customId === 'pag3') {
    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder().setCustomId('mimic3').setLabel('Mimic (All Chapters)').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('forsaken2').setLabel('Forsaken').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('bedwars2').setLabel('Bedwars').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('ink2').setLabel('Ink Game').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('pag4').setLabel('P√°gina 4').setStyle(ButtonStyle.Primary)
      );
    await interaction.update({ content: 'Jogos p√°gina 3', components: [row] });
  }

  // --------- P√°gina 4 ----------
  if (interaction.customId === 'pag4') {
    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder().setCustomId('bluelock').setLabel('Blue Lock').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('piggy').setLabel('Piggy').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('fnaf').setLabel('FNaF Doom').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('bladeball').setLabel('Blade Ball').setStyle(ButtonStyle.Primary)
      );
    await interaction.update({ content: 'Jogos p√°gina 4', components: [row] });
  }

});
